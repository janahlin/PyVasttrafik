# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik  # noqa: E501

    The version of the OpenAPI document: v4
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from pyvasttrafik.api.configuration import Configuration


class VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gid': 'str',
        'name': 'str',
        'location_type': 'VTApiPlaneraResaCoreModelsLocationType',
        'latitude': 'float',
        'longitude': 'float',
        'platform': 'str',
        'straight_line_distance_in_meters': 'int',
        'has_local_service': 'bool'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'location_type': 'locationType',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'platform': 'platform',
        'straight_line_distance_in_meters': 'straightLineDistanceInMeters',
        'has_local_service': 'hasLocalService'
    }

    def __init__(self, gid=None, name=None, location_type=None, latitude=None, longitude=None, platform=None, straight_line_distance_in_meters=None, has_local_service=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._location_type = None
        self._latitude = None
        self._longitude = None
        self._platform = None
        self._straight_line_distance_in_meters = None
        self._has_local_service = None
        self.discriminator = None

        self.gid = gid
        self.name = name
        self.location_type = location_type
        self.latitude = latitude
        self.longitude = longitude
        self.platform = platform
        self.straight_line_distance_in_meters = straight_line_distance_in_meters
        self.has_local_service = has_local_service

    @property
    def gid(self):
        """Gets the gid of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501

        The 16-digit Västtrafik gid.  # noqa: E501

        :return: The gid of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.

        The 16-digit Västtrafik gid.  # noqa: E501

        :param gid: The gid of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :type gid: str
        """

        self._gid = gid

    @property
    def name(self):
        """Gets the name of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501

        The location name.  # noqa: E501

        :return: The name of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.

        The location name.  # noqa: E501

        :param name: The name of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def location_type(self):
        """Gets the location_type of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501


        :return: The location_type of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaCoreModelsLocationType
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.


        :param location_type: The location_type of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :type location_type: VTApiPlaneraResaCoreModelsLocationType
        """
        if self.local_vars_configuration.client_side_validation and location_type is None:  # noqa: E501
            raise ValueError("Invalid value for `location_type`, must not be `None`")  # noqa: E501

        self._location_type = location_type

    @property
    def latitude(self):
        """Gets the latitude of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501

        The WGS84 latitude of the location.  # noqa: E501

        :return: The latitude of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.

        The WGS84 latitude of the location.  # noqa: E501

        :param latitude: The latitude of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501

        The WGS84 longitude of the location.  # noqa: E501

        :return: The longitude of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.

        The WGS84 longitude of the location.  # noqa: E501

        :param longitude: The longitude of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def platform(self):
        """Gets the platform of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501

        The location platform, only available for stop points.  # noqa: E501

        :return: The platform of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.

        The location platform, only available for stop points.  # noqa: E501

        :param platform: The platform of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :type platform: str
        """

        self._platform = platform

    @property
    def straight_line_distance_in_meters(self):
        """Gets the straight_line_distance_in_meters of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501

        The location straight line distance in meters.  # noqa: E501

        :return: The straight_line_distance_in_meters of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :rtype: int
        """
        return self._straight_line_distance_in_meters

    @straight_line_distance_in_meters.setter
    def straight_line_distance_in_meters(self, straight_line_distance_in_meters):
        """Sets the straight_line_distance_in_meters of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.

        The location straight line distance in meters.  # noqa: E501

        :param straight_line_distance_in_meters: The straight_line_distance_in_meters of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :type straight_line_distance_in_meters: int
        """

        self._straight_line_distance_in_meters = straight_line_distance_in_meters

    @property
    def has_local_service(self):
        """Gets the has_local_service of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501

        Is \"Närtrafik\" (Local Service) available for the location?  Values are only available for LocationType: StopArea, PointOfInterest and Address.  Values are only available for endpoint: locations/by-text.  # noqa: E501

        :return: The has_local_service of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_local_service

    @has_local_service.setter
    def has_local_service(self, has_local_service):
        """Sets the has_local_service of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.

        Is \"Närtrafik\" (Local Service) available for the location?  Values are only available for LocationType: StopArea, PointOfInterest and Address.  Values are only available for endpoint: locations/by-text.  # noqa: E501

        :param has_local_service: The has_local_service of this VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.  # noqa: E501
        :type has_local_service: bool
        """

        self._has_local_service = has_local_service

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel):
            return True

        return self.to_dict() != other.to_dict()
