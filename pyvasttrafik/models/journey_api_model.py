# coding: utf-8

"""
    Störning

    Störningsinformation för realtid och planerad trafik  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from pyvasttrafik.api.configuration import Configuration


class JourneyApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gid': 'str',
        'departure_date_time': 'datetime',
        'line': 'LineApiModel'
    }

    attribute_map = {
        'gid': 'gid',
        'departure_date_time': 'departureDateTime',
        'line': 'line'
    }

    def __init__(self, gid=None, departure_date_time=None, line=None, local_vars_configuration=None):  # noqa: E501
        """JourneyApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._departure_date_time = None
        self._line = None
        self.discriminator = None

        self.gid = gid
        if departure_date_time is not None:
            self.departure_date_time = departure_date_time
        self.line = line

    @property
    def gid(self):
        """Gets the gid of this JourneyApiModel.  # noqa: E501

        Example data: 9015014620500001  # noqa: E501

        :return: The gid of this JourneyApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this JourneyApiModel.

        Example data: 9015014620500001  # noqa: E501

        :param gid: The gid of this JourneyApiModel.  # noqa: E501
        :type gid: str
        """
        if self.local_vars_configuration.client_side_validation and gid is None:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def departure_date_time(self):
        """Gets the departure_date_time of this JourneyApiModel.  # noqa: E501

        Example data: \"2018-01-03T10:31:00.000+01:00\"  # noqa: E501

        :return: The departure_date_time of this JourneyApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._departure_date_time

    @departure_date_time.setter
    def departure_date_time(self, departure_date_time):
        """Sets the departure_date_time of this JourneyApiModel.

        Example data: \"2018-01-03T10:31:00.000+01:00\"  # noqa: E501

        :param departure_date_time: The departure_date_time of this JourneyApiModel.  # noqa: E501
        :type departure_date_time: datetime
        """

        self._departure_date_time = departure_date_time

    @property
    def line(self):
        """Gets the line of this JourneyApiModel.  # noqa: E501


        :return: The line of this JourneyApiModel.  # noqa: E501
        :rtype: LineApiModel
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this JourneyApiModel.


        :param line: The line of this JourneyApiModel.  # noqa: E501
        :type line: LineApiModel
        """
        if self.local_vars_configuration.client_side_validation and line is None:  # noqa: E501
            raise ValueError("Invalid value for `line`, must not be `None`")  # noqa: E501

        self._line = line

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneyApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneyApiModel):
            return True

        return self.to_dict() != other.to_dict()
