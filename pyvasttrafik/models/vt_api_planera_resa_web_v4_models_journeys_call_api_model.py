# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik  # noqa: E501

    The version of the OpenAPI document: v4
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from pyvasttrafik.api.configuration import Configuration


class VTApiPlaneraResaWebV4ModelsJourneysCallApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'stop_point': 'VTApiPlaneraResaWebV4ModelsJourneysStopPointApiModel',
        'planned_time': 'str',
        'estimated_time': 'str',
        'estimated_otherwise_planned_time': 'str',
        'notes': 'list[VTApiPlaneraResaCoreModelsNote]'
    }

    attribute_map = {
        'stop_point': 'stopPoint',
        'planned_time': 'plannedTime',
        'estimated_time': 'estimatedTime',
        'estimated_otherwise_planned_time': 'estimatedOtherwisePlannedTime',
        'notes': 'notes'
    }

    def __init__(self, stop_point=None, planned_time=None, estimated_time=None, estimated_otherwise_planned_time=None, notes=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsJourneysCallApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._stop_point = None
        self._planned_time = None
        self._estimated_time = None
        self._estimated_otherwise_planned_time = None
        self._notes = None
        self.discriminator = None

        self.stop_point = stop_point
        self.planned_time = planned_time
        self.estimated_time = estimated_time
        self.estimated_otherwise_planned_time = estimated_otherwise_planned_time
        self.notes = notes

    @property
    def stop_point(self):
        """Gets the stop_point of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501


        :return: The stop_point of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsJourneysStopPointApiModel
        """
        return self._stop_point

    @stop_point.setter
    def stop_point(self, stop_point):
        """Sets the stop_point of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.


        :param stop_point: The stop_point of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501
        :type stop_point: VTApiPlaneraResaWebV4ModelsJourneysStopPointApiModel
        """
        if self.local_vars_configuration.client_side_validation and stop_point is None:  # noqa: E501
            raise ValueError("Invalid value for `stop_point`, must not be `None`")  # noqa: E501

        self._stop_point = stop_point

    @property
    def planned_time(self):
        """Gets the planned_time of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501

        The planned time of the call in RFC 3339 format.  # noqa: E501

        :return: The planned_time of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501
        :rtype: str
        """
        return self._planned_time

    @planned_time.setter
    def planned_time(self, planned_time):
        """Sets the planned_time of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.

        The planned time of the call in RFC 3339 format.  # noqa: E501

        :param planned_time: The planned_time of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501
        :type planned_time: str
        """
        if self.local_vars_configuration.client_side_validation and planned_time is None:  # noqa: E501
            raise ValueError("Invalid value for `planned_time`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                planned_time is not None and len(planned_time) < 1):
            raise ValueError("Invalid value for `planned_time`, length must be greater than or equal to `1`")  # noqa: E501

        self._planned_time = planned_time

    @property
    def estimated_time(self):
        """Gets the estimated_time of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501

        The estimated time of the call in RFC 3339 format.  # noqa: E501

        :return: The estimated_time of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_time

    @estimated_time.setter
    def estimated_time(self, estimated_time):
        """Sets the estimated_time of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.

        The estimated time of the call in RFC 3339 format.  # noqa: E501

        :param estimated_time: The estimated_time of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501
        :type estimated_time: str
        """

        self._estimated_time = estimated_time

    @property
    def estimated_otherwise_planned_time(self):
        """Gets the estimated_otherwise_planned_time of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501

        The best known time of the call in RFC 3339 format. Is EstimatedTime if exists, otherwise PlannedTime.  # noqa: E501

        :return: The estimated_otherwise_planned_time of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_otherwise_planned_time

    @estimated_otherwise_planned_time.setter
    def estimated_otherwise_planned_time(self, estimated_otherwise_planned_time):
        """Sets the estimated_otherwise_planned_time of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.

        The best known time of the call in RFC 3339 format. Is EstimatedTime if exists, otherwise PlannedTime.  # noqa: E501

        :param estimated_otherwise_planned_time: The estimated_otherwise_planned_time of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501
        :type estimated_otherwise_planned_time: str
        """

        self._estimated_otherwise_planned_time = estimated_otherwise_planned_time

    @property
    def notes(self):
        """Gets the notes of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501

        An ordered list (most important first) of notes related to the call.  # noqa: E501

        :return: The notes of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501
        :rtype: list[VTApiPlaneraResaCoreModelsNote]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.

        An ordered list (most important first) of notes related to the call.  # noqa: E501

        :param notes: The notes of this VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.  # noqa: E501
        :type notes: list[VTApiPlaneraResaCoreModelsNote]
        """

        self._notes = notes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VTApiPlaneraResaWebV4ModelsJourneysCallApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VTApiPlaneraResaWebV4ModelsJourneysCallApiModel):
            return True

        return self.to_dict() != other.to_dict()
