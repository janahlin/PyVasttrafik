# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik  # noqa: E501

    The version of the OpenAPI document: v4
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from pyvasttrafik.api.configuration import Configuration


class VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'origin': 'VTApiPlaneraResaWebV4ModelsJourneysCallApiModel',
        'destination': 'VTApiPlaneraResaWebV4ModelsJourneysCallApiModel',
        'is_cancelled': 'bool',
        'is_part_cancelled': 'bool',
        'service_journey': 'VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel',
        'notes': 'list[VTApiPlaneraResaCoreModelsNote]',
        'estimated_distance_in_meters': 'int',
        'planned_connecting_time_in_minutes': 'int',
        'estimated_connecting_time_in_minutes': 'int',
        'is_risk_of_missing_connection': 'bool',
        'planned_departure_time': 'str',
        'planned_arrival_time': 'str',
        'planned_duration_in_minutes': 'int',
        'estimated_departure_time': 'str',
        'estimated_arrival_time': 'str',
        'estimated_duration_in_minutes': 'int',
        'estimated_otherwise_planned_arrival_time': 'str',
        'estimated_otherwise_planned_departure_time': 'str',
        'occupancy': 'VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel',
        'journey_leg_index': 'int'
    }

    attribute_map = {
        'origin': 'origin',
        'destination': 'destination',
        'is_cancelled': 'isCancelled',
        'is_part_cancelled': 'isPartCancelled',
        'service_journey': 'serviceJourney',
        'notes': 'notes',
        'estimated_distance_in_meters': 'estimatedDistanceInMeters',
        'planned_connecting_time_in_minutes': 'plannedConnectingTimeInMinutes',
        'estimated_connecting_time_in_minutes': 'estimatedConnectingTimeInMinutes',
        'is_risk_of_missing_connection': 'isRiskOfMissingConnection',
        'planned_departure_time': 'plannedDepartureTime',
        'planned_arrival_time': 'plannedArrivalTime',
        'planned_duration_in_minutes': 'plannedDurationInMinutes',
        'estimated_departure_time': 'estimatedDepartureTime',
        'estimated_arrival_time': 'estimatedArrivalTime',
        'estimated_duration_in_minutes': 'estimatedDurationInMinutes',
        'estimated_otherwise_planned_arrival_time': 'estimatedOtherwisePlannedArrivalTime',
        'estimated_otherwise_planned_departure_time': 'estimatedOtherwisePlannedDepartureTime',
        'occupancy': 'occupancy',
        'journey_leg_index': 'journeyLegIndex'
    }

    def __init__(self, origin=None, destination=None, is_cancelled=None, is_part_cancelled=None, service_journey=None, notes=None, estimated_distance_in_meters=None, planned_connecting_time_in_minutes=None, estimated_connecting_time_in_minutes=None, is_risk_of_missing_connection=None, planned_departure_time=None, planned_arrival_time=None, planned_duration_in_minutes=None, estimated_departure_time=None, estimated_arrival_time=None, estimated_duration_in_minutes=None, estimated_otherwise_planned_arrival_time=None, estimated_otherwise_planned_departure_time=None, occupancy=None, journey_leg_index=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._origin = None
        self._destination = None
        self._is_cancelled = None
        self._is_part_cancelled = None
        self._service_journey = None
        self._notes = None
        self._estimated_distance_in_meters = None
        self._planned_connecting_time_in_minutes = None
        self._estimated_connecting_time_in_minutes = None
        self._is_risk_of_missing_connection = None
        self._planned_departure_time = None
        self._planned_arrival_time = None
        self._planned_duration_in_minutes = None
        self._estimated_departure_time = None
        self._estimated_arrival_time = None
        self._estimated_duration_in_minutes = None
        self._estimated_otherwise_planned_arrival_time = None
        self._estimated_otherwise_planned_departure_time = None
        self._occupancy = None
        self._journey_leg_index = None
        self.discriminator = None

        self.origin = origin
        self.destination = destination
        self.is_cancelled = is_cancelled
        if is_part_cancelled is not None:
            self.is_part_cancelled = is_part_cancelled
        if service_journey is not None:
            self.service_journey = service_journey
        self.notes = notes
        self.estimated_distance_in_meters = estimated_distance_in_meters
        self.planned_connecting_time_in_minutes = planned_connecting_time_in_minutes
        self.estimated_connecting_time_in_minutes = estimated_connecting_time_in_minutes
        self.is_risk_of_missing_connection = is_risk_of_missing_connection
        self.planned_departure_time = planned_departure_time
        self.planned_arrival_time = planned_arrival_time
        self.planned_duration_in_minutes = planned_duration_in_minutes
        self.estimated_departure_time = estimated_departure_time
        self.estimated_arrival_time = estimated_arrival_time
        self.estimated_duration_in_minutes = estimated_duration_in_minutes
        self.estimated_otherwise_planned_arrival_time = estimated_otherwise_planned_arrival_time
        self.estimated_otherwise_planned_departure_time = estimated_otherwise_planned_departure_time
        if occupancy is not None:
            self.occupancy = occupancy
        if journey_leg_index is not None:
            self.journey_leg_index = journey_leg_index

    @property
    def origin(self):
        """Gets the origin of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501


        :return: The origin of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsJourneysCallApiModel
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.


        :param origin: The origin of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type origin: VTApiPlaneraResaWebV4ModelsJourneysCallApiModel
        """
        if self.local_vars_configuration.client_side_validation and origin is None:  # noqa: E501
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501

        self._origin = origin

    @property
    def destination(self):
        """Gets the destination of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501


        :return: The destination of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsJourneysCallApiModel
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.


        :param destination: The destination of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type destination: VTApiPlaneraResaWebV4ModelsJourneysCallApiModel
        """
        if self.local_vars_configuration.client_side_validation and destination is None:  # noqa: E501
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def is_cancelled(self):
        """Gets the is_cancelled of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        Flag indicating if the trip leg is cancelled.  # noqa: E501

        :return: The is_cancelled of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        """Sets the is_cancelled of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        Flag indicating if the trip leg is cancelled.  # noqa: E501

        :param is_cancelled: The is_cancelled of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type is_cancelled: bool
        """
        if self.local_vars_configuration.client_side_validation and is_cancelled is None:  # noqa: E501
            raise ValueError("Invalid value for `is_cancelled`, must not be `None`")  # noqa: E501

        self._is_cancelled = is_cancelled

    @property
    def is_part_cancelled(self):
        """Gets the is_part_cancelled of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        Flag indicating if the trip leg is partially cancelled.  # noqa: E501

        :return: The is_part_cancelled of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_part_cancelled

    @is_part_cancelled.setter
    def is_part_cancelled(self, is_part_cancelled):
        """Sets the is_part_cancelled of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        Flag indicating if the trip leg is partially cancelled.  # noqa: E501

        :param is_part_cancelled: The is_part_cancelled of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type is_part_cancelled: bool
        """

        self._is_part_cancelled = is_part_cancelled

    @property
    def service_journey(self):
        """Gets the service_journey of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501


        :return: The service_journey of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel
        """
        return self._service_journey

    @service_journey.setter
    def service_journey(self, service_journey):
        """Sets the service_journey of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.


        :param service_journey: The service_journey of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type service_journey: VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel
        """

        self._service_journey = service_journey

    @property
    def notes(self):
        """Gets the notes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        An ordered list (most important first) of notes related to the trip leg.  # noqa: E501

        :return: The notes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: list[VTApiPlaneraResaCoreModelsNote]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        An ordered list (most important first) of notes related to the trip leg.  # noqa: E501

        :param notes: The notes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type notes: list[VTApiPlaneraResaCoreModelsNote]
        """

        self._notes = notes

    @property
    def estimated_distance_in_meters(self):
        """Gets the estimated_distance_in_meters of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        Estimated distance in meters. Only for transport mode Walk.  # noqa: E501

        :return: The estimated_distance_in_meters of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: int
        """
        return self._estimated_distance_in_meters

    @estimated_distance_in_meters.setter
    def estimated_distance_in_meters(self, estimated_distance_in_meters):
        """Sets the estimated_distance_in_meters of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        Estimated distance in meters. Only for transport mode Walk.  # noqa: E501

        :param estimated_distance_in_meters: The estimated_distance_in_meters of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type estimated_distance_in_meters: int
        """

        self._estimated_distance_in_meters = estimated_distance_in_meters

    @property
    def planned_connecting_time_in_minutes(self):
        """Gets the planned_connecting_time_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        The planned (according to timetable) connecting time in minutes relative to  the previous public transport trip leg (if any).  # noqa: E501

        :return: The planned_connecting_time_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: int
        """
        return self._planned_connecting_time_in_minutes

    @planned_connecting_time_in_minutes.setter
    def planned_connecting_time_in_minutes(self, planned_connecting_time_in_minutes):
        """Sets the planned_connecting_time_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        The planned (according to timetable) connecting time in minutes relative to  the previous public transport trip leg (if any).  # noqa: E501

        :param planned_connecting_time_in_minutes: The planned_connecting_time_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type planned_connecting_time_in_minutes: int
        """

        self._planned_connecting_time_in_minutes = planned_connecting_time_in_minutes

    @property
    def estimated_connecting_time_in_minutes(self):
        """Gets the estimated_connecting_time_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        The estimated (according to real-time data) connecting time in minutes relative to  the previous public transport trip leg (if any).  # noqa: E501

        :return: The estimated_connecting_time_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: int
        """
        return self._estimated_connecting_time_in_minutes

    @estimated_connecting_time_in_minutes.setter
    def estimated_connecting_time_in_minutes(self, estimated_connecting_time_in_minutes):
        """Sets the estimated_connecting_time_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        The estimated (according to real-time data) connecting time in minutes relative to  the previous public transport trip leg (if any).  # noqa: E501

        :param estimated_connecting_time_in_minutes: The estimated_connecting_time_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type estimated_connecting_time_in_minutes: int
        """

        self._estimated_connecting_time_in_minutes = estimated_connecting_time_in_minutes

    @property
    def is_risk_of_missing_connection(self):
        """Gets the is_risk_of_missing_connection of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        Flag indicating that there is less than 5 minutes margin between arriving at the  origin stop point and the departure from that stop point.  # noqa: E501

        :return: The is_risk_of_missing_connection of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_risk_of_missing_connection

    @is_risk_of_missing_connection.setter
    def is_risk_of_missing_connection(self, is_risk_of_missing_connection):
        """Sets the is_risk_of_missing_connection of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        Flag indicating that there is less than 5 minutes margin between arriving at the  origin stop point and the departure from that stop point.  # noqa: E501

        :param is_risk_of_missing_connection: The is_risk_of_missing_connection of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type is_risk_of_missing_connection: bool
        """

        self._is_risk_of_missing_connection = is_risk_of_missing_connection

    @property
    def planned_departure_time(self):
        """Gets the planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        The planned departure time in RFC 3339 format.  # noqa: E501

        :return: The planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: str
        """
        return self._planned_departure_time

    @planned_departure_time.setter
    def planned_departure_time(self, planned_departure_time):
        """Sets the planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        The planned departure time in RFC 3339 format.  # noqa: E501

        :param planned_departure_time: The planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type planned_departure_time: str
        """

        self._planned_departure_time = planned_departure_time

    @property
    def planned_arrival_time(self):
        """Gets the planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        The planned arrival time in RFC 3339 format.  # noqa: E501

        :return: The planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: str
        """
        return self._planned_arrival_time

    @planned_arrival_time.setter
    def planned_arrival_time(self, planned_arrival_time):
        """Sets the planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        The planned arrival time in RFC 3339 format.  # noqa: E501

        :param planned_arrival_time: The planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type planned_arrival_time: str
        """

        self._planned_arrival_time = planned_arrival_time

    @property
    def planned_duration_in_minutes(self):
        """Gets the planned_duration_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        The planned duration in minutes.  # noqa: E501

        :return: The planned_duration_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: int
        """
        return self._planned_duration_in_minutes

    @planned_duration_in_minutes.setter
    def planned_duration_in_minutes(self, planned_duration_in_minutes):
        """Sets the planned_duration_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        The planned duration in minutes.  # noqa: E501

        :param planned_duration_in_minutes: The planned_duration_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type planned_duration_in_minutes: int
        """

        self._planned_duration_in_minutes = planned_duration_in_minutes

    @property
    def estimated_departure_time(self):
        """Gets the estimated_departure_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        The estimated departure time in RFC 3339 format, if available.  # noqa: E501

        :return: The estimated_departure_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_departure_time

    @estimated_departure_time.setter
    def estimated_departure_time(self, estimated_departure_time):
        """Sets the estimated_departure_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        The estimated departure time in RFC 3339 format, if available.  # noqa: E501

        :param estimated_departure_time: The estimated_departure_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type estimated_departure_time: str
        """

        self._estimated_departure_time = estimated_departure_time

    @property
    def estimated_arrival_time(self):
        """Gets the estimated_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        The estimated arrival time in RFC 3339 format, if available.  # noqa: E501

        :return: The estimated_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_arrival_time

    @estimated_arrival_time.setter
    def estimated_arrival_time(self, estimated_arrival_time):
        """Sets the estimated_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        The estimated arrival time in RFC 3339 format, if available.  # noqa: E501

        :param estimated_arrival_time: The estimated_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type estimated_arrival_time: str
        """

        self._estimated_arrival_time = estimated_arrival_time

    @property
    def estimated_duration_in_minutes(self):
        """Gets the estimated_duration_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        The estimated duration in minutes, if available.  # noqa: E501

        :return: The estimated_duration_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: int
        """
        return self._estimated_duration_in_minutes

    @estimated_duration_in_minutes.setter
    def estimated_duration_in_minutes(self, estimated_duration_in_minutes):
        """Sets the estimated_duration_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        The estimated duration in minutes, if available.  # noqa: E501

        :param estimated_duration_in_minutes: The estimated_duration_in_minutes of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type estimated_duration_in_minutes: int
        """

        self._estimated_duration_in_minutes = estimated_duration_in_minutes

    @property
    def estimated_otherwise_planned_arrival_time(self):
        """Gets the estimated_otherwise_planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        The best known time of the arrival in RFC 3339 format. Is EstimatedArrivalTime if exists, otherwise PlannedArrivalTime.  # noqa: E501

        :return: The estimated_otherwise_planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_otherwise_planned_arrival_time

    @estimated_otherwise_planned_arrival_time.setter
    def estimated_otherwise_planned_arrival_time(self, estimated_otherwise_planned_arrival_time):
        """Sets the estimated_otherwise_planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        The best known time of the arrival in RFC 3339 format. Is EstimatedArrivalTime if exists, otherwise PlannedArrivalTime.  # noqa: E501

        :param estimated_otherwise_planned_arrival_time: The estimated_otherwise_planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type estimated_otherwise_planned_arrival_time: str
        """

        self._estimated_otherwise_planned_arrival_time = estimated_otherwise_planned_arrival_time

    @property
    def estimated_otherwise_planned_departure_time(self):
        """Gets the estimated_otherwise_planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        The best known time of the departure in RFC 3339 format. Is EstimatedDepartureTime if exists, otherwise PlannedDepartureTime.  # noqa: E501

        :return: The estimated_otherwise_planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_otherwise_planned_departure_time

    @estimated_otherwise_planned_departure_time.setter
    def estimated_otherwise_planned_departure_time(self, estimated_otherwise_planned_departure_time):
        """Sets the estimated_otherwise_planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        The best known time of the departure in RFC 3339 format. Is EstimatedDepartureTime if exists, otherwise PlannedDepartureTime.  # noqa: E501

        :param estimated_otherwise_planned_departure_time: The estimated_otherwise_planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type estimated_otherwise_planned_departure_time: str
        """

        self._estimated_otherwise_planned_departure_time = estimated_otherwise_planned_departure_time

    @property
    def occupancy(self):
        """Gets the occupancy of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501


        :return: The occupancy of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.


        :param occupancy: The occupancy of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type occupancy: VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel
        """

        self._occupancy = occupancy

    @property
    def journey_leg_index(self):
        """Gets the journey_leg_index of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501

        Index of Leg in Journey  # noqa: E501

        :return: The journey_leg_index of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :rtype: int
        """
        return self._journey_leg_index

    @journey_leg_index.setter
    def journey_leg_index(self, journey_leg_index):
        """Sets the journey_leg_index of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.

        Index of Leg in Journey  # noqa: E501

        :param journey_leg_index: The journey_leg_index of this VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.  # noqa: E501
        :type journey_leg_index: int
        """

        self._journey_leg_index = journey_leg_index

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel):
            return True

        return self.to_dict() != other.to_dict()
