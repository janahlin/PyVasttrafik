# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik  # noqa: E501

    The version of the OpenAPI document: v4
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from pyvasttrafik.api.configuration import Configuration


class VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'service_journeys': 'list[VTApiPlaneraResaWebV4ModelsJourneyDetailsServiceJourneyApiModel]',
        'calls_on_trip_leg': 'list[VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel]',
        'trip_leg_coordinates': 'list[VTApiPlaneraResaWebV4ModelsCoordinateApiModel]',
        'tariff_zones': 'list[VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel]',
        'is_cancelled': 'bool',
        'is_part_cancelled': 'bool',
        'occupancy': 'VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel',
        'journey_leg_index': 'int'
    }

    attribute_map = {
        'service_journeys': 'serviceJourneys',
        'calls_on_trip_leg': 'callsOnTripLeg',
        'trip_leg_coordinates': 'tripLegCoordinates',
        'tariff_zones': 'tariffZones',
        'is_cancelled': 'isCancelled',
        'is_part_cancelled': 'isPartCancelled',
        'occupancy': 'occupancy',
        'journey_leg_index': 'journeyLegIndex'
    }

    def __init__(self, service_journeys=None, calls_on_trip_leg=None, trip_leg_coordinates=None, tariff_zones=None, is_cancelled=None, is_part_cancelled=None, occupancy=None, journey_leg_index=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._service_journeys = None
        self._calls_on_trip_leg = None
        self._trip_leg_coordinates = None
        self._tariff_zones = None
        self._is_cancelled = None
        self._is_part_cancelled = None
        self._occupancy = None
        self._journey_leg_index = None
        self.discriminator = None

        self.service_journeys = service_journeys
        self.calls_on_trip_leg = calls_on_trip_leg
        self.trip_leg_coordinates = trip_leg_coordinates
        self.tariff_zones = tariff_zones
        if is_cancelled is not None:
            self.is_cancelled = is_cancelled
        if is_part_cancelled is not None:
            self.is_part_cancelled = is_part_cancelled
        if occupancy is not None:
            self.occupancy = occupancy
        if journey_leg_index is not None:
            self.journey_leg_index = journey_leg_index

    @property
    def service_journeys(self):
        """Gets the service_journeys of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501

        The service journey for the trip leg.  # noqa: E501

        :return: The service_journeys of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :rtype: list[VTApiPlaneraResaWebV4ModelsJourneyDetailsServiceJourneyApiModel]
        """
        return self._service_journeys

    @service_journeys.setter
    def service_journeys(self, service_journeys):
        """Sets the service_journeys of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.

        The service journey for the trip leg.  # noqa: E501

        :param service_journeys: The service_journeys of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :type service_journeys: list[VTApiPlaneraResaWebV4ModelsJourneyDetailsServiceJourneyApiModel]
        """

        self._service_journeys = service_journeys

    @property
    def calls_on_trip_leg(self):
        """Gets the calls_on_trip_leg of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501

        The calls on the trip leg.  # noqa: E501

        :return: The calls_on_trip_leg of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :rtype: list[VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel]
        """
        return self._calls_on_trip_leg

    @calls_on_trip_leg.setter
    def calls_on_trip_leg(self, calls_on_trip_leg):
        """Sets the calls_on_trip_leg of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.

        The calls on the trip leg.  # noqa: E501

        :param calls_on_trip_leg: The calls_on_trip_leg of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :type calls_on_trip_leg: list[VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel]
        """

        self._calls_on_trip_leg = calls_on_trip_leg

    @property
    def trip_leg_coordinates(self):
        """Gets the trip_leg_coordinates of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501

        The coordinates for the trip leg.  # noqa: E501

        :return: The trip_leg_coordinates of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :rtype: list[VTApiPlaneraResaWebV4ModelsCoordinateApiModel]
        """
        return self._trip_leg_coordinates

    @trip_leg_coordinates.setter
    def trip_leg_coordinates(self, trip_leg_coordinates):
        """Sets the trip_leg_coordinates of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.

        The coordinates for the trip leg.  # noqa: E501

        :param trip_leg_coordinates: The trip_leg_coordinates of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :type trip_leg_coordinates: list[VTApiPlaneraResaWebV4ModelsCoordinateApiModel]
        """

        self._trip_leg_coordinates = trip_leg_coordinates

    @property
    def tariff_zones(self):
        """Gets the tariff_zones of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501

        The tariff zones that the trip leg traverses.  # noqa: E501

        :return: The tariff_zones of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :rtype: list[VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel]
        """
        return self._tariff_zones

    @tariff_zones.setter
    def tariff_zones(self, tariff_zones):
        """Sets the tariff_zones of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.

        The tariff zones that the trip leg traverses.  # noqa: E501

        :param tariff_zones: The tariff_zones of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :type tariff_zones: list[VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel]
        """

        self._tariff_zones = tariff_zones

    @property
    def is_cancelled(self):
        """Gets the is_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501

        Flag indicating if the trip leg is cancelled.  # noqa: E501

        :return: The is_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        """Sets the is_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.

        Flag indicating if the trip leg is cancelled.  # noqa: E501

        :param is_cancelled: The is_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :type is_cancelled: bool
        """

        self._is_cancelled = is_cancelled

    @property
    def is_part_cancelled(self):
        """Gets the is_part_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501

        Flag indicating if the trip leg is partially cancelled.  # noqa: E501

        :return: The is_part_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_part_cancelled

    @is_part_cancelled.setter
    def is_part_cancelled(self, is_part_cancelled):
        """Sets the is_part_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.

        Flag indicating if the trip leg is partially cancelled.  # noqa: E501

        :param is_part_cancelled: The is_part_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :type is_part_cancelled: bool
        """

        self._is_part_cancelled = is_part_cancelled

    @property
    def occupancy(self):
        """Gets the occupancy of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501


        :return: The occupancy of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.


        :param occupancy: The occupancy of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :type occupancy: VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel
        """

        self._occupancy = occupancy

    @property
    def journey_leg_index(self):
        """Gets the journey_leg_index of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501

        Index of Leg in Journey  # noqa: E501

        :return: The journey_leg_index of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :rtype: int
        """
        return self._journey_leg_index

    @journey_leg_index.setter
    def journey_leg_index(self, journey_leg_index):
        """Sets the journey_leg_index of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.

        Index of Leg in Journey  # noqa: E501

        :param journey_leg_index: The journey_leg_index of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.  # noqa: E501
        :type journey_leg_index: int
        """

        self._journey_leg_index = journey_leg_index

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel):
            return True

        return self.to_dict() != other.to_dict()
