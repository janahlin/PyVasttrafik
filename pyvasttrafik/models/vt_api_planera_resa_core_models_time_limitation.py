# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik  # noqa: E501

    The version of the OpenAPI document: v4
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from pyvasttrafik.api.configuration import Configuration


class VTApiPlaneraResaCoreModelsTimeLimitation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    UNKNOWN = "unknown"
    HELTID = "heltid"
    LAGTRAFIK = "lagtrafik"
    SKOLKORT04TILL19 = "skolkort04till19"
    SKOLKORT04TILL22 = "skolkort04till22"
    SKOLKORT04TILL1930 = "skolkort04till1930"
    FRITID100 = "fritid100"
    FRITIDKOMPLEMENT = "fritidkomplement"
    FRITIDVARDAG19TILL22 = "fritidvardag19till22"
    FRITIDVARDAG14TILL24 = "fritidvardag14till24"
    FRITIDKVALLHELG = "fritidkvallhelg"
    FRITIDKVALLHELGLOV = "fritidkvallhelglov"
    FRITIDJULSOMMARLOV = "fritidjulsommarlov"
    FRITIDALE = "fritidale"

    allowable_values = [UNKNOWN, HELTID, LAGTRAFIK, SKOLKORT04TILL19, SKOLKORT04TILL22, SKOLKORT04TILL1930, FRITID100, FRITIDKOMPLEMENT, FRITIDVARDAG19TILL22, FRITIDVARDAG14TILL24, FRITIDKVALLHELG, FRITIDKVALLHELGLOV, FRITIDJULSOMMARLOV, FRITIDALE]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaCoreModelsTimeLimitation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VTApiPlaneraResaCoreModelsTimeLimitation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VTApiPlaneraResaCoreModelsTimeLimitation):
            return True

        return self.to_dict() != other.to_dict()
