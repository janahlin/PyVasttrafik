# coding: utf-8

"""
    Störning

    Störningsinformation för realtid och planerad trafik  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from pyvasttrafik.api.configuration import Configuration


class TrafficSituationApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'situation_number': 'str',
        'creation_time': 'datetime',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'severity': 'str',
        'title': 'str',
        'description': 'str',
        'affected_stop_points': 'list[StopPointApiModel]',
        'affected_lines': 'list[LineApiModel]',
        'affected_journeys': 'list[JourneyApiModel]'
    }

    attribute_map = {
        'situation_number': 'situationNumber',
        'creation_time': 'creationTime',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'severity': 'severity',
        'title': 'title',
        'description': 'description',
        'affected_stop_points': 'affectedStopPoints',
        'affected_lines': 'affectedLines',
        'affected_journeys': 'affectedJourneys'
    }

    def __init__(self, situation_number=None, creation_time=None, start_time=None, end_time=None, severity=None, title=None, description=None, affected_stop_points=None, affected_lines=None, affected_journeys=None, local_vars_configuration=None):  # noqa: E501
        """TrafficSituationApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._situation_number = None
        self._creation_time = None
        self._start_time = None
        self._end_time = None
        self._severity = None
        self._title = None
        self._description = None
        self._affected_stop_points = None
        self._affected_lines = None
        self._affected_journeys = None
        self.discriminator = None

        self.situation_number = situation_number
        if creation_time is not None:
            self.creation_time = creation_time
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if severity is not None:
            self.severity = severity
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        self.affected_stop_points = affected_stop_points
        self.affected_lines = affected_lines
        self.affected_journeys = affected_journeys

    @property
    def situation_number(self):
        """Gets the situation_number of this TrafficSituationApiModel.  # noqa: E501

        Example data: \"2001186014\"  # noqa: E501

        :return: The situation_number of this TrafficSituationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._situation_number

    @situation_number.setter
    def situation_number(self, situation_number):
        """Sets the situation_number of this TrafficSituationApiModel.

        Example data: \"2001186014\"  # noqa: E501

        :param situation_number: The situation_number of this TrafficSituationApiModel.  # noqa: E501
        :type situation_number: str
        """
        if self.local_vars_configuration.client_side_validation and situation_number is None:  # noqa: E501
            raise ValueError("Invalid value for `situation_number`, must not be `None`")  # noqa: E501

        self._situation_number = situation_number

    @property
    def creation_time(self):
        """Gets the creation_time of this TrafficSituationApiModel.  # noqa: E501

        Time when traffic situation is created/updated.  Example data: \"2018-01-03T10:31:42.108+01:00\"  # noqa: E501

        :return: The creation_time of this TrafficSituationApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this TrafficSituationApiModel.

        Time when traffic situation is created/updated.  Example data: \"2018-01-03T10:31:42.108+01:00\"  # noqa: E501

        :param creation_time: The creation_time of this TrafficSituationApiModel.  # noqa: E501
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def start_time(self):
        """Gets the start_time of this TrafficSituationApiModel.  # noqa: E501

        Time from when the traffic situation is valid.  Example data: \"2018-01-03T10:31:42.108+01:00\"  # noqa: E501

        :return: The start_time of this TrafficSituationApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TrafficSituationApiModel.

        Time from when the traffic situation is valid.  Example data: \"2018-01-03T10:31:42.108+01:00\"  # noqa: E501

        :param start_time: The start_time of this TrafficSituationApiModel.  # noqa: E501
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this TrafficSituationApiModel.  # noqa: E501

        End time for when traffic sitation ends.  Example data: \"2018-01-04T10:31:42.108+01:00\"  # noqa: E501

        :return: The end_time of this TrafficSituationApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TrafficSituationApiModel.

        End time for when traffic sitation ends.  Example data: \"2018-01-04T10:31:42.108+01:00\"  # noqa: E501

        :param end_time: The end_time of this TrafficSituationApiModel.  # noqa: E501
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def severity(self):
        """Gets the severity of this TrafficSituationApiModel.  # noqa: E501

        Describes the severity of the traffic situation. Possible values are \"severe\", \"normal\" and \"slight\". Traffic situations with \"slight\" severity should be considered if they should be shown. Example data: \"severe\"  # noqa: E501

        :return: The severity of this TrafficSituationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this TrafficSituationApiModel.

        Describes the severity of the traffic situation. Possible values are \"severe\", \"normal\" and \"slight\". Traffic situations with \"slight\" severity should be considered if they should be shown. Example data: \"severe\"  # noqa: E501

        :param severity: The severity of this TrafficSituationApiModel.  # noqa: E501
        :type severity: str
        """

        self._severity = severity

    @property
    def title(self):
        """Gets the title of this TrafficSituationApiModel.  # noqa: E501

        Example data: \"Linje X, hÃ¥llplats HPL Ã¤r tillfÃ¤lligt indragen mot DEST/HPL pÃ¥ grund av X.\"  # noqa: E501

        :return: The title of this TrafficSituationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TrafficSituationApiModel.

        Example data: \"Linje X, hÃ¥llplats HPL Ã¤r tillfÃ¤lligt indragen mot DEST/HPL pÃ¥ grund av X.\"  # noqa: E501

        :param title: The title of this TrafficSituationApiModel.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this TrafficSituationApiModel.  # noqa: E501

        Example data: \"NÃ¤rmaste hÃ¥llplats Ã¤r HPL och HPL. (Detta berÃ¤knas pÃ¥gÃ¥ frÃ¥n DATUM klockan HH:MM till DATUM klockan HH:MM.)\"  # noqa: E501

        :return: The description of this TrafficSituationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrafficSituationApiModel.

        Example data: \"NÃ¤rmaste hÃ¥llplats Ã¤r HPL och HPL. (Detta berÃ¤knas pÃ¥gÃ¥ frÃ¥n DATUM klockan HH:MM till DATUM klockan HH:MM.)\"  # noqa: E501

        :param description: The description of this TrafficSituationApiModel.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def affected_stop_points(self):
        """Gets the affected_stop_points of this TrafficSituationApiModel.  # noqa: E501


        :return: The affected_stop_points of this TrafficSituationApiModel.  # noqa: E501
        :rtype: list[StopPointApiModel]
        """
        return self._affected_stop_points

    @affected_stop_points.setter
    def affected_stop_points(self, affected_stop_points):
        """Sets the affected_stop_points of this TrafficSituationApiModel.


        :param affected_stop_points: The affected_stop_points of this TrafficSituationApiModel.  # noqa: E501
        :type affected_stop_points: list[StopPointApiModel]
        """
        if self.local_vars_configuration.client_side_validation and affected_stop_points is None:  # noqa: E501
            raise ValueError("Invalid value for `affected_stop_points`, must not be `None`")  # noqa: E501

        self._affected_stop_points = affected_stop_points

    @property
    def affected_lines(self):
        """Gets the affected_lines of this TrafficSituationApiModel.  # noqa: E501


        :return: The affected_lines of this TrafficSituationApiModel.  # noqa: E501
        :rtype: list[LineApiModel]
        """
        return self._affected_lines

    @affected_lines.setter
    def affected_lines(self, affected_lines):
        """Sets the affected_lines of this TrafficSituationApiModel.


        :param affected_lines: The affected_lines of this TrafficSituationApiModel.  # noqa: E501
        :type affected_lines: list[LineApiModel]
        """
        if self.local_vars_configuration.client_side_validation and affected_lines is None:  # noqa: E501
            raise ValueError("Invalid value for `affected_lines`, must not be `None`")  # noqa: E501

        self._affected_lines = affected_lines

    @property
    def affected_journeys(self):
        """Gets the affected_journeys of this TrafficSituationApiModel.  # noqa: E501


        :return: The affected_journeys of this TrafficSituationApiModel.  # noqa: E501
        :rtype: list[JourneyApiModel]
        """
        return self._affected_journeys

    @affected_journeys.setter
    def affected_journeys(self, affected_journeys):
        """Sets the affected_journeys of this TrafficSituationApiModel.


        :param affected_journeys: The affected_journeys of this TrafficSituationApiModel.  # noqa: E501
        :type affected_journeys: list[JourneyApiModel]
        """
        if self.local_vars_configuration.client_side_validation and affected_journeys is None:  # noqa: E501
            raise ValueError("Invalid value for `affected_journeys`, must not be `None`")  # noqa: E501

        self._affected_journeys = affected_journeys

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrafficSituationApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TrafficSituationApiModel):
            return True

        return self.to_dict() != other.to_dict()
