# coding: utf-8

"""
    Störning

    Störningsinformation för realtid och planerad trafik  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from pyvasttrafik.api.configuration import Configuration


class LineApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gid': 'str',
        'name': 'str',
        'technical_number': 'int',
        'designation': 'str',
        'default_transport_mode_code': 'str',
        'transport_authority_code': 'str',
        'transport_authority_name': 'str',
        'text_color': 'str',
        'background_color': 'str',
        'directions': 'list[DirectionApiModel]',
        'municipalities': 'list[MunicipalityApiModel]',
        'affected_stop_point_gids': 'list[str]'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'technical_number': 'technicalNumber',
        'designation': 'designation',
        'default_transport_mode_code': 'defaultTransportModeCode',
        'transport_authority_code': 'transportAuthorityCode',
        'transport_authority_name': 'transportAuthorityName',
        'text_color': 'textColor',
        'background_color': 'backgroundColor',
        'directions': 'directions',
        'municipalities': 'municipalities',
        'affected_stop_point_gids': 'affectedStopPointGids'
    }

    def __init__(self, gid=None, name=None, technical_number=None, designation=None, default_transport_mode_code=None, transport_authority_code=None, transport_authority_name=None, text_color=None, background_color=None, directions=None, municipalities=None, affected_stop_point_gids=None, local_vars_configuration=None):  # noqa: E501
        """LineApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._technical_number = None
        self._designation = None
        self._default_transport_mode_code = None
        self._transport_authority_code = None
        self._transport_authority_name = None
        self._text_color = None
        self._background_color = None
        self._directions = None
        self._municipalities = None
        self._affected_stop_point_gids = None
        self.discriminator = None

        self.gid = gid
        if name is not None:
            self.name = name
        if technical_number is not None:
            self.technical_number = technical_number
        if designation is not None:
            self.designation = designation
        if default_transport_mode_code is not None:
            self.default_transport_mode_code = default_transport_mode_code
        if transport_authority_code is not None:
            self.transport_authority_code = transport_authority_code
        if transport_authority_name is not None:
            self.transport_authority_name = transport_authority_name
        if text_color is not None:
            self.text_color = text_color
        if background_color is not None:
            self.background_color = background_color
        self.directions = directions
        self.municipalities = municipalities
        self.affected_stop_point_gids = affected_stop_point_gids

    @property
    def gid(self):
        """Gets the gid of this LineApiModel.  # noqa: E501

        Example data: 9011014620500000  # noqa: E501

        :return: The gid of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this LineApiModel.

        Example data: 9011014620500000  # noqa: E501

        :param gid: The gid of this LineApiModel.  # noqa: E501
        :type gid: str
        """
        if self.local_vars_configuration.client_side_validation and gid is None:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def name(self):
        """Gets the name of this LineApiModel.  # noqa: E501

        The name of the line.  Example data: \"GrÃ¶n express\", \"\"  # noqa: E501

        :return: The name of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LineApiModel.

        The name of the line.  Example data: \"GrÃ¶n express\", \"\"  # noqa: E501

        :param name: The name of this LineApiModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def technical_number(self):
        """Gets the technical_number of this LineApiModel.  # noqa: E501

        A technical number of the line - should normally not be used in public information. Can be of value for describing train lines.  Example data: 6205  # noqa: E501

        :return: The technical_number of this LineApiModel.  # noqa: E501
        :rtype: int
        """
        return self._technical_number

    @technical_number.setter
    def technical_number(self, technical_number):
        """Sets the technical_number of this LineApiModel.

        A technical number of the line - should normally not be used in public information. Can be of value for describing train lines.  Example data: 6205  # noqa: E501

        :param technical_number: The technical_number of this LineApiModel.  # noqa: E501
        :type technical_number: int
        """

        self._technical_number = technical_number

    @property
    def designation(self):
        """Gets the designation of this LineApiModel.  # noqa: E501

        Public identifier of line, i.e the public line \"number\", to be used in all presentation.  Example data: \"GRÃ–N\", \"4\"  # noqa: E501

        :return: The designation of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this LineApiModel.

        Public identifier of line, i.e the public line \"number\", to be used in all presentation.  Example data: \"GRÃ–N\", \"4\"  # noqa: E501

        :param designation: The designation of this LineApiModel.  # noqa: E501
        :type designation: str
        """

        self._designation = designation

    @property
    def default_transport_mode_code(self):
        """Gets the default_transport_mode_code of this LineApiModel.  # noqa: E501

        Code for the default transport mode of the line. Transport mode for individual journeys may differ from this value.  Valid codes are \"bus\", \"ferry\", \"metro\", \"ship\", \"taxi\", \"train\" and \"tram\".  Example data: \"bus\"  # noqa: E501

        :return: The default_transport_mode_code of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._default_transport_mode_code

    @default_transport_mode_code.setter
    def default_transport_mode_code(self, default_transport_mode_code):
        """Sets the default_transport_mode_code of this LineApiModel.

        Code for the default transport mode of the line. Transport mode for individual journeys may differ from this value.  Valid codes are \"bus\", \"ferry\", \"metro\", \"ship\", \"taxi\", \"train\" and \"tram\".  Example data: \"bus\"  # noqa: E501

        :param default_transport_mode_code: The default_transport_mode_code of this LineApiModel.  # noqa: E501
        :type default_transport_mode_code: str
        """

        self._default_transport_mode_code = default_transport_mode_code

    @property
    def transport_authority_code(self):
        """Gets the transport_authority_code of this LineApiModel.  # noqa: E501

        Code for transport authority.  Example data: \"vt\"  # noqa: E501

        :return: The transport_authority_code of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._transport_authority_code

    @transport_authority_code.setter
    def transport_authority_code(self, transport_authority_code):
        """Sets the transport_authority_code of this LineApiModel.

        Code for transport authority.  Example data: \"vt\"  # noqa: E501

        :param transport_authority_code: The transport_authority_code of this LineApiModel.  # noqa: E501
        :type transport_authority_code: str
        """

        self._transport_authority_code = transport_authority_code

    @property
    def transport_authority_name(self):
        """Gets the transport_authority_name of this LineApiModel.  # noqa: E501

        Full name of transport authority.  Example data: \"VÃ¤sttrafik\"  # noqa: E501

        :return: The transport_authority_name of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._transport_authority_name

    @transport_authority_name.setter
    def transport_authority_name(self, transport_authority_name):
        """Sets the transport_authority_name of this LineApiModel.

        Full name of transport authority.  Example data: \"VÃ¤sttrafik\"  # noqa: E501

        :param transport_authority_name: The transport_authority_name of this LineApiModel.  # noqa: E501
        :type transport_authority_name: str
        """

        self._transport_authority_name = transport_authority_name

    @property
    def text_color(self):
        """Gets the text_color of this LineApiModel.  # noqa: E501

        Color code for text for line.  Example data: \"FFFFFF\"  # noqa: E501

        :return: The text_color of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._text_color

    @text_color.setter
    def text_color(self, text_color):
        """Sets the text_color of this LineApiModel.

        Color code for text for line.  Example data: \"FFFFFF\"  # noqa: E501

        :param text_color: The text_color of this LineApiModel.  # noqa: E501
        :type text_color: str
        """

        self._text_color = text_color

    @property
    def background_color(self):
        """Gets the background_color of this LineApiModel.  # noqa: E501

        Color code for background for line.  Example data: \"F03A43\"  # noqa: E501

        :return: The background_color of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this LineApiModel.

        Color code for background for line.  Example data: \"F03A43\"  # noqa: E501

        :param background_color: The background_color of this LineApiModel.  # noqa: E501
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def directions(self):
        """Gets the directions of this LineApiModel.  # noqa: E501


        :return: The directions of this LineApiModel.  # noqa: E501
        :rtype: list[DirectionApiModel]
        """
        return self._directions

    @directions.setter
    def directions(self, directions):
        """Sets the directions of this LineApiModel.


        :param directions: The directions of this LineApiModel.  # noqa: E501
        :type directions: list[DirectionApiModel]
        """
        if self.local_vars_configuration.client_side_validation and directions is None:  # noqa: E501
            raise ValueError("Invalid value for `directions`, must not be `None`")  # noqa: E501

        self._directions = directions

    @property
    def municipalities(self):
        """Gets the municipalities of this LineApiModel.  # noqa: E501


        :return: The municipalities of this LineApiModel.  # noqa: E501
        :rtype: list[MunicipalityApiModel]
        """
        return self._municipalities

    @municipalities.setter
    def municipalities(self, municipalities):
        """Sets the municipalities of this LineApiModel.


        :param municipalities: The municipalities of this LineApiModel.  # noqa: E501
        :type municipalities: list[MunicipalityApiModel]
        """
        if self.local_vars_configuration.client_side_validation and municipalities is None:  # noqa: E501
            raise ValueError("Invalid value for `municipalities`, must not be `None`")  # noqa: E501

        self._municipalities = municipalities

    @property
    def affected_stop_point_gids(self):
        """Gets the affected_stop_point_gids of this LineApiModel.  # noqa: E501


        :return: The affected_stop_point_gids of this LineApiModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._affected_stop_point_gids

    @affected_stop_point_gids.setter
    def affected_stop_point_gids(self, affected_stop_point_gids):
        """Sets the affected_stop_point_gids of this LineApiModel.


        :param affected_stop_point_gids: The affected_stop_point_gids of this LineApiModel.  # noqa: E501
        :type affected_stop_point_gids: list[str]
        """
        if self.local_vars_configuration.client_side_validation and affected_stop_point_gids is None:  # noqa: E501
            raise ValueError("Invalid value for `affected_stop_point_gids`, must not be `None`")  # noqa: E501

        self._affected_stop_point_gids = affected_stop_point_gids

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LineApiModel):
            return True

        return self.to_dict() != other.to_dict()
