# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik  # noqa: E501

    The version of the OpenAPI document: v4
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from pyvasttrafik.api.configuration import Configuration


class VTApiPlaneraResaWebV4ModelsPaginationLinks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'previous': 'str',
        'next': 'str',
        'current': 'str'
    }

    attribute_map = {
        'previous': 'previous',
        'next': 'next',
        'current': 'current'
    }

    def __init__(self, previous=None, next=None, current=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsPaginationLinks - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._previous = None
        self._next = None
        self._current = None
        self.discriminator = None

        self.previous = previous
        self.next = next
        self.current = current

    @property
    def previous(self):
        """Gets the previous of this VTApiPlaneraResaWebV4ModelsPaginationLinks.  # noqa: E501

        Link to the previous results page, if available, otherwise null.  # noqa: E501

        :return: The previous of this VTApiPlaneraResaWebV4ModelsPaginationLinks.  # noqa: E501
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this VTApiPlaneraResaWebV4ModelsPaginationLinks.

        Link to the previous results page, if available, otherwise null.  # noqa: E501

        :param previous: The previous of this VTApiPlaneraResaWebV4ModelsPaginationLinks.  # noqa: E501
        :type previous: str
        """

        self._previous = previous

    @property
    def next(self):
        """Gets the next of this VTApiPlaneraResaWebV4ModelsPaginationLinks.  # noqa: E501

        Link to the next results page, if available, otherwise null. Not guaranteed to give a result if called.  # noqa: E501

        :return: The next of this VTApiPlaneraResaWebV4ModelsPaginationLinks.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this VTApiPlaneraResaWebV4ModelsPaginationLinks.

        Link to the next results page, if available, otherwise null. Not guaranteed to give a result if called.  # noqa: E501

        :param next: The next of this VTApiPlaneraResaWebV4ModelsPaginationLinks.  # noqa: E501
        :type next: str
        """

        self._next = next

    @property
    def current(self):
        """Gets the current of this VTApiPlaneraResaWebV4ModelsPaginationLinks.  # noqa: E501

        Link to the current results page, if available, otherwise null. Not guaranteed to give a result if called.  # noqa: E501

        :return: The current of this VTApiPlaneraResaWebV4ModelsPaginationLinks.  # noqa: E501
        :rtype: str
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this VTApiPlaneraResaWebV4ModelsPaginationLinks.

        Link to the current results page, if available, otherwise null. Not guaranteed to give a result if called.  # noqa: E501

        :param current: The current of this VTApiPlaneraResaWebV4ModelsPaginationLinks.  # noqa: E501
        :type current: str
        """

        self._current = current

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VTApiPlaneraResaWebV4ModelsPaginationLinks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VTApiPlaneraResaWebV4ModelsPaginationLinks):
            return True

        return self.to_dict() != other.to_dict()
