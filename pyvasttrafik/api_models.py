try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from pyvasttrafik.config import Configuration


class CoreModelsLocationType(object):
    UNKNOWN = "unknown"
    STOPAREA = "stoparea"
    STOPPOINT = "stoppoint"
    ADDRESS = "address"
    POINTOFINTEREST = "pointofinterest"
    METASTATION = "metastation"

    allowable_values = [UNKNOWN, STOPAREA, STOPPOINT, ADDRESS, POINTOFINTEREST, METASTATION]  # noqa: E501

    api_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreModelsLocationType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CoreModelsLocationType):
            return True

        return self.to_dict() != other.to_dict()


class CoreModelsNote(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'type': 'str',
        'severity': 'CoreModelsSeverity',
        'text': 'str'
    }

    attribute_map = {
        'type': 'type',
        'severity': 'severity',
        'text': 'text'
    }

    def __init__(self, type=None, severity=None, text=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaCoreModelsNote - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._severity = None
        self._text = None
        self.discriminator = None

        self.type = type
        if severity is not None:
            self.severity = severity
        self.text = text

    @property
    def type(self):
        """Gets the type of this VTApiPlaneraResaCoreModelsNote.  # noqa: E501


        :return: The type of this VTApiPlaneraResaCoreModelsNote.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VTApiPlaneraResaCoreModelsNote.


        :param type: The type of this VTApiPlaneraResaCoreModelsNote.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def severity(self):
        """Gets the severity of this VTApiPlaneraResaCoreModelsNote.  # noqa: E501


        :return: The severity of this VTApiPlaneraResaCoreModelsNote.  # noqa: E501
        :rtype: CoreModelsSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this VTApiPlaneraResaCoreModelsNote.


        :param severity: The severity of this VTApiPlaneraResaCoreModelsNote.  # noqa: E501
        :type severity: CoreModelsSeverity
        """

        self._severity = severity

    @property
    def text(self):
        """Gets the text of this VTApiPlaneraResaCoreModelsNote.  # noqa: E501


        :return: The text of this VTApiPlaneraResaCoreModelsNote.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this VTApiPlaneraResaCoreModelsNote.


        :param text: The text of this VTApiPlaneraResaCoreModelsNote.  # noqa: E501
        :type text: str
        """

        self._text = text

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreModelsNote):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CoreModelsNote):
            return True

        return self.to_dict() != other.to_dict()


class CoreModelsSeverity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    UNKNOWN = "unknown"
    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"

    allowable_values = [UNKNOWN, LOW, NORMAL, HIGH]  # noqa: E501

    """
    Attributes:
      api_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaCoreModelsSeverity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreModelsSeverity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CoreModelsSeverity):
            return True

        return self.to_dict() != other.to_dict()


class JourneysGetJourneysResponse(object):
    api_types = {
        'results': 'list[JourneysJourneyApiModel]',
        'pagination': 'PaginationProperties',
        'links': 'PaginationLinks'
    }

    attribute_map = {
        'results': 'results',
        'pagination': 'pagination',
        'links': 'links'
    }

    def __init__(self, results=None, pagination=None, links=None, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._results = None
        self._pagination = None
        self._links = None
        self.discriminator = None

        self.results = results
        if pagination is not None:
            self.pagination = pagination
        if links is not None:
            self.links = links

    @property
    def results(self):
        return self._results

    @results.setter
    def results(self, results):
        self._results = results

    @property
    def pagination(self):
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        self._pagination = pagination

    @property
    def links(self):
        return self._links

    @links.setter
    def links(self, links):
        self._links = links

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneysGetJourneysResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneysGetJourneysResponse):
            return True

        return self.to_dict() != other.to_dict()


class JourneysJourneyApiModel(object):
    api_types = {
        'reconstruction_reference': 'str',
        'details_reference': 'str',
        'departure_access_link': 'JourneysDepartureAccessLinkApiModel',
        'trip_legs': 'list[JourneysTripLegApiModel]',
        'connection_links': 'list[JourneysConnectionLinkApiModel]',
        'arrival_access_link': 'JourneysArrivalAccessLinkApiModel',
        'destination_link': 'JourneysDestinationLinkApiModel',
        'is_departed': 'bool',
        'occupancy': 'OccupancyInformationApiModel'
    }

    attribute_map = {
        'reconstruction_reference': 'reconstructionReference',
        'details_reference': 'detailsReference',
        'departure_access_link': 'departureAccessLink',
        'trip_legs': 'tripLegs',
        'connection_links': 'connectionLinks',
        'arrival_access_link': 'arrivalAccessLink',
        'destination_link': 'destinationLink',
        'is_departed': 'isDeparted',
        'occupancy': 'occupancy'
    }

    def __init__(self, reconstruction_reference=None, details_reference=None, departure_access_link=None,
                 trip_legs=None, connection_links=None, arrival_access_link=None, destination_link=None,
                 is_departed=None, occupancy=None, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._reconstruction_reference = None
        self._details_reference = None
        self._departure_access_link = None
        self._trip_legs = None
        self._connection_links = None
        self._arrival_access_link = None
        self._destination_link = None
        self._is_departed = None
        self._occupancy = None
        self.discriminator = None

        self.reconstruction_reference = reconstruction_reference
        self.details_reference = details_reference
        if departure_access_link is not None:
            self.departure_access_link = departure_access_link
        self.trip_legs = trip_legs
        self.connection_links = connection_links
        if arrival_access_link is not None:
            self.arrival_access_link = arrival_access_link
        if destination_link is not None:
            self.destination_link = destination_link
        self.is_departed = is_departed
        if occupancy is not None:
            self.occupancy = occupancy

    @property
    def reconstruction_reference(self):
        return self._reconstruction_reference

    @reconstruction_reference.setter
    def reconstruction_reference(self, reconstruction_reference):
        self._reconstruction_reference = reconstruction_reference

    @property
    def details_reference(self):
        return self._details_reference

    @details_reference.setter
    def details_reference(self, details_reference):
        self._details_reference = details_reference

    @property
    def departure_access_link(self):
        return self._departure_access_link

    @departure_access_link.setter
    def departure_access_link(self, departure_access_link):
        self._departure_access_link = departure_access_link

    @property
    def trip_legs(self):
        return self._trip_legs

    @trip_legs.setter
    def trip_legs(self, trip_legs):
        self._trip_legs = trip_legs

    @property
    def connection_links(self):
        return self._connection_links

    @connection_links.setter
    def connection_links(self, connection_links):
        self._connection_links = connection_links

    @property
    def arrival_access_link(self):
        return self._arrival_access_link

    @arrival_access_link.setter
    def arrival_access_link(self, arrival_access_link):
        self._arrival_access_link = arrival_access_link

    @property
    def destination_link(self):
        return self._destination_link

    @destination_link.setter
    def destination_link(self, destination_link):
        self._destination_link = destination_link

    @property
    def is_departed(self):
        return self._is_departed

    @is_departed.setter
    def is_departed(self, is_departed):
        self._is_departed = is_departed

    @property
    def occupancy(self):
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        self._occupancy = occupancy

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneysJourneyApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneysJourneyApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneysTripLegApiModel(object):
    api_types = {
        'origin': 'JourneysCallApiModel',
        'destination': 'JourneysCallApiModel',
        'is_cancelled': 'bool',
        'is_part_cancelled': 'bool',
        'service_journey': 'JourneysServiceJourneyApiModel',
        'notes': 'list[CoreModelsNote]',
        'estimated_distance_in_meters': 'int',
        'planned_connecting_time_in_minutes': 'int',
        'estimated_connecting_time_in_minutes': 'int',
        'is_risk_of_missing_connection': 'bool',
        'planned_departure_time': 'str',
        'planned_arrival_time': 'str',
        'planned_duration_in_minutes': 'int',
        'estimated_departure_time': 'str',
        'estimated_arrival_time': 'str',
        'estimated_duration_in_minutes': 'int',
        'estimated_otherwise_planned_arrival_time': 'str',
        'estimated_otherwise_planned_departure_time': 'str',
        'occupancy': 'OccupancyInformationApiModel',
        'journey_leg_index': 'int'
    }

    attribute_map = {
        'origin': 'origin',
        'destination': 'destination',
        'is_cancelled': 'isCancelled',
        'is_part_cancelled': 'isPartCancelled',
        'service_journey': 'serviceJourney',
        'notes': 'notes',
        'estimated_distance_in_meters': 'estimatedDistanceInMeters',
        'planned_connecting_time_in_minutes': 'plannedConnectingTimeInMinutes',
        'estimated_connecting_time_in_minutes': 'estimatedConnectingTimeInMinutes',
        'is_risk_of_missing_connection': 'isRiskOfMissingConnection',
        'planned_departure_time': 'plannedDepartureTime',
        'planned_arrival_time': 'plannedArrivalTime',
        'planned_duration_in_minutes': 'plannedDurationInMinutes',
        'estimated_departure_time': 'estimatedDepartureTime',
        'estimated_arrival_time': 'estimatedArrivalTime',
        'estimated_duration_in_minutes': 'estimatedDurationInMinutes',
        'estimated_otherwise_planned_arrival_time': 'estimatedOtherwisePlannedArrivalTime',
        'estimated_otherwise_planned_departure_time': 'estimatedOtherwisePlannedDepartureTime',
        'occupancy': 'occupancy',
        'journey_leg_index': 'journeyLegIndex'
    }

    def __init__(self, origin=None, destination=None, is_cancelled=None, is_part_cancelled=None, service_journey=None,
                 notes=None, estimated_distance_in_meters=None, planned_connecting_time_in_minutes=None,
                 estimated_connecting_time_in_minutes=None, is_risk_of_missing_connection=None,
                 planned_departure_time=None, planned_arrival_time=None, planned_duration_in_minutes=None,
                 estimated_departure_time=None, estimated_arrival_time=None, estimated_duration_in_minutes=None,
                 estimated_otherwise_planned_arrival_time=None, estimated_otherwise_planned_departure_time=None,
                 occupancy=None, journey_leg_index=None, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._origin = None
        self._destination = None
        self._is_cancelled = None
        self._is_part_cancelled = None
        self._service_journey = None
        self._notes = None
        self._estimated_distance_in_meters = None
        self._planned_connecting_time_in_minutes = None
        self._estimated_connecting_time_in_minutes = None
        self._is_risk_of_missing_connection = None
        self._planned_departure_time = None
        self._planned_arrival_time = None
        self._planned_duration_in_minutes = None
        self._estimated_departure_time = None
        self._estimated_arrival_time = None
        self._estimated_duration_in_minutes = None
        self._estimated_otherwise_planned_arrival_time = None
        self._estimated_otherwise_planned_departure_time = None
        self._occupancy = None
        self._journey_leg_index = None
        self.discriminator = None

        self.origin = origin
        self.destination = destination
        self.is_cancelled = is_cancelled
        if is_part_cancelled is not None:
            self.is_part_cancelled = is_part_cancelled
        if service_journey is not None:
            self.service_journey = service_journey
        self.notes = notes
        self.estimated_distance_in_meters = estimated_distance_in_meters
        self.planned_connecting_time_in_minutes = planned_connecting_time_in_minutes
        self.estimated_connecting_time_in_minutes = estimated_connecting_time_in_minutes
        self.is_risk_of_missing_connection = is_risk_of_missing_connection
        self.planned_departure_time = planned_departure_time
        self.planned_arrival_time = planned_arrival_time
        self.planned_duration_in_minutes = planned_duration_in_minutes
        self.estimated_departure_time = estimated_departure_time
        self.estimated_arrival_time = estimated_arrival_time
        self.estimated_duration_in_minutes = estimated_duration_in_minutes
        self.estimated_otherwise_planned_arrival_time = estimated_otherwise_planned_arrival_time
        self.estimated_otherwise_planned_departure_time = estimated_otherwise_planned_departure_time
        if occupancy is not None:
            self.occupancy = occupancy
        if journey_leg_index is not None:
            self.journey_leg_index = journey_leg_index

    @property
    def origin(self):
        return self._origin

    @origin.setter
    def origin(self, origin):
        if self.local_vars_configuration.client_side_validation and origin is None:  # noqa: E501
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501

        self._origin = origin

    @property
    def destination(self):
        return self._destination

    @destination.setter
    def destination(self, destination):
        if self.local_vars_configuration.client_side_validation and destination is None:  # noqa: E501
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def is_cancelled(self):
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        if self.local_vars_configuration.client_side_validation and is_cancelled is None:  # noqa: E501
            raise ValueError("Invalid value for `is_cancelled`, must not be `None`")  # noqa: E501

        self._is_cancelled = is_cancelled

    @property
    def is_part_cancelled(self):
        return self._is_part_cancelled

    @is_part_cancelled.setter
    def is_part_cancelled(self, is_part_cancelled):
        self._is_part_cancelled = is_part_cancelled

    @property
    def service_journey(self):
        return self._service_journey

    @service_journey.setter
    def service_journey(self, service_journey):
        self._service_journey = service_journey

    @property
    def notes(self):
        return self._notes

    @notes.setter
    def notes(self, notes):
        self._notes = notes

    @property
    def estimated_distance_in_meters(self):
        return self._estimated_distance_in_meters

    @estimated_distance_in_meters.setter
    def estimated_distance_in_meters(self, estimated_distance_in_meters):
        self._estimated_distance_in_meters = estimated_distance_in_meters

    @property
    def planned_connecting_time_in_minutes(self):
        return self._planned_connecting_time_in_minutes

    @planned_connecting_time_in_minutes.setter
    def planned_connecting_time_in_minutes(self, planned_connecting_time_in_minutes):
        self._planned_connecting_time_in_minutes = planned_connecting_time_in_minutes

    @property
    def estimated_connecting_time_in_minutes(self):
        return self._estimated_connecting_time_in_minutes

    @estimated_connecting_time_in_minutes.setter
    def estimated_connecting_time_in_minutes(self, estimated_connecting_time_in_minutes):
        self._estimated_connecting_time_in_minutes = estimated_connecting_time_in_minutes

    @property
    def is_risk_of_missing_connection(self):
        return self._is_risk_of_missing_connection

    @is_risk_of_missing_connection.setter
    def is_risk_of_missing_connection(self, is_risk_of_missing_connection):
        self._is_risk_of_missing_connection = is_risk_of_missing_connection

    @property
    def planned_departure_time(self):
        return self._planned_departure_time

    @planned_departure_time.setter
    def planned_departure_time(self, planned_departure_time):
        self._planned_departure_time = planned_departure_time

    @property
    def planned_arrival_time(self):
        return self._planned_arrival_time

    @planned_arrival_time.setter
    def planned_arrival_time(self, planned_arrival_time):
        self._planned_arrival_time = planned_arrival_time

    @property
    def planned_duration_in_minutes(self):
        return self._planned_duration_in_minutes

    @planned_duration_in_minutes.setter
    def planned_duration_in_minutes(self, planned_duration_in_minutes):
        self._planned_duration_in_minutes = planned_duration_in_minutes

    @property
    def estimated_departure_time(self):
        return self._estimated_departure_time

    @estimated_departure_time.setter
    def estimated_departure_time(self, estimated_departure_time):
        self._estimated_departure_time = estimated_departure_time

    @property
    def estimated_arrival_time(self):
        return self._estimated_arrival_time

    @estimated_arrival_time.setter
    def estimated_arrival_time(self, estimated_arrival_time):
        self._estimated_arrival_time = estimated_arrival_time

    @property
    def estimated_duration_in_minutes(self):
        return self._estimated_duration_in_minutes

    @estimated_duration_in_minutes.setter
    def estimated_duration_in_minutes(self, estimated_duration_in_minutes):
        self._estimated_duration_in_minutes = estimated_duration_in_minutes

    @property
    def estimated_otherwise_planned_arrival_time(self):
        return self._estimated_otherwise_planned_arrival_time

    @estimated_otherwise_planned_arrival_time.setter
    def estimated_otherwise_planned_arrival_time(self, estimated_otherwise_planned_arrival_time):
        self._estimated_otherwise_planned_arrival_time = estimated_otherwise_planned_arrival_time

    @property
    def estimated_otherwise_planned_departure_time(self):
        return self._estimated_otherwise_planned_departure_time

    @estimated_otherwise_planned_departure_time.setter
    def estimated_otherwise_planned_departure_time(self, estimated_otherwise_planned_departure_time):
        self._estimated_otherwise_planned_departure_time = estimated_otherwise_planned_departure_time

    @property
    def occupancy(self):
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        self._occupancy = occupancy

    @property
    def journey_leg_index(self):
        return self._journey_leg_index

    @journey_leg_index.setter
    def journey_leg_index(self, journey_leg_index):
        self._journey_leg_index = journey_leg_index

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneysTripLegApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneysTripLegApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneyDetailsTripLegDetailsApiModel(object):
    api_types = {
        'service_journeys': 'list[JourneyDetailsServiceJourneyApiModel]',
        'calls_on_trip_leg': 'list[JourneyDetailsCallDetailsApiModel]',
        'trip_leg_coordinates': 'list[CoordinateApiModel]',
        'tariff_zones': 'list[JourneyDetailsTariffZoneApiModel]',
        'is_cancelled': 'bool',
        'is_part_cancelled': 'bool',
        'occupancy': 'OccupancyInformationApiModel',
        'journey_leg_index': 'int'
    }

    attribute_map = {
        'service_journeys': 'serviceJourneys',
        'calls_on_trip_leg': 'callsOnTripLeg',
        'trip_leg_coordinates': 'tripLegCoordinates',
        'tariff_zones': 'tariffZones',
        'is_cancelled': 'isCancelled',
        'is_part_cancelled': 'isPartCancelled',
        'occupancy': 'occupancy',
        'journey_leg_index': 'journeyLegIndex'
    }

    def __init__(self, service_journeys=None, calls_on_trip_leg=None, trip_leg_coordinates=None, tariff_zones=None,
                 is_cancelled=None, is_part_cancelled=None, occupancy=None, journey_leg_index=None,
                 local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._service_journeys = None
        self._calls_on_trip_leg = None
        self._trip_leg_coordinates = None
        self._tariff_zones = None
        self._is_cancelled = None
        self._is_part_cancelled = None
        self._occupancy = None
        self._journey_leg_index = None
        self.discriminator = None

        self.service_journeys = service_journeys
        self.calls_on_trip_leg = calls_on_trip_leg
        self.trip_leg_coordinates = trip_leg_coordinates
        self.tariff_zones = tariff_zones
        if is_cancelled is not None:
            self.is_cancelled = is_cancelled
        if is_part_cancelled is not None:
            self.is_part_cancelled = is_part_cancelled
        if occupancy is not None:
            self.occupancy = occupancy
        if journey_leg_index is not None:
            self.journey_leg_index = journey_leg_index

    @property
    def service_journeys(self):
        return self._service_journeys

    @service_journeys.setter
    def service_journeys(self, service_journeys):
        self._service_journeys = service_journeys

    @property
    def calls_on_trip_leg(self):
        return self._calls_on_trip_leg

    @calls_on_trip_leg.setter
    def calls_on_trip_leg(self, calls_on_trip_leg):
        self._calls_on_trip_leg = calls_on_trip_leg

    @property
    def trip_leg_coordinates(self):
        return self._trip_leg_coordinates

    @trip_leg_coordinates.setter
    def trip_leg_coordinates(self, trip_leg_coordinates):
        self._trip_leg_coordinates = trip_leg_coordinates

    @property
    def tariff_zones(self):
        return self._tariff_zones

    @tariff_zones.setter
    def tariff_zones(self, tariff_zones):
        self._tariff_zones = tariff_zones

    @property
    def is_cancelled(self):
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        self._is_cancelled = is_cancelled

    @property
    def is_part_cancelled(self):
        return self._is_part_cancelled

    @is_part_cancelled.setter
    def is_part_cancelled(self, is_part_cancelled):
        self._is_part_cancelled = is_part_cancelled

    @property
    def occupancy(self):
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        self._occupancy = occupancy

    @property
    def journey_leg_index(self):
        return self._journey_leg_index

    @journey_leg_index.setter
    def journey_leg_index(self, journey_leg_index):
        self._journey_leg_index = journey_leg_index

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneyDetailsTripLegDetailsApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneyDetailsTripLegDetailsApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneyDetailsServiceJourneyApiModel(object):
    api_types = {
        'gid': 'str',
        'direction': 'str',
        'line': 'JourneyDetailsLineDetailsApiModel',
        'service_journey_coordinates': 'list[CoordinateApiModel]',
        'calls_on_service_journey': 'list[JourneyDetailsCallDetailsApiModel]'
    }

    attribute_map = {
        'gid': 'gid',
        'direction': 'direction',
        'line': 'line',
        'service_journey_coordinates': 'serviceJourneyCoordinates',
        'calls_on_service_journey': 'callsOnServiceJourney'
    }

    def __init__(self, gid=None, direction=None, line=None, service_journey_coordinates=None,
                 calls_on_service_journey=None, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._direction = None
        self._line = None
        self._service_journey_coordinates = None
        self._calls_on_service_journey = None
        self.discriminator = None

        self.gid = gid
        self.direction = direction
        if line is not None:
            self.line = line
        self.service_journey_coordinates = service_journey_coordinates
        self.calls_on_service_journey = calls_on_service_journey

    @property
    def gid(self):
        return self._gid

    @gid.setter
    def gid(self, gid):
        self._gid = gid

    @property
    def direction(self):
        return self._direction

    @direction.setter
    def direction(self, direction):
        self._direction = direction

    @property
    def line(self):
        return self._line

    @line.setter
    def line(self, line):
        self._line = line

    @property
    def service_journey_coordinates(self):
        return self._service_journey_coordinates

    @service_journey_coordinates.setter
    def service_journey_coordinates(self, service_journey_coordinates):
        self._service_journey_coordinates = service_journey_coordinates

    @property
    def calls_on_service_journey(self):
        return self._calls_on_service_journey

    @calls_on_service_journey.setter
    def calls_on_service_journey(self, calls_on_service_journey):
        self._calls_on_service_journey = calls_on_service_journey

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneyDetailsServiceJourneyApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneyDetailsServiceJourneyApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneyDetailsLineDetailsApiModel(object):
    api_types = {
        'name': 'str',
        'background_color': 'str',
        'foreground_color': 'str',
        'border_color': 'str',
        'transport_mode': 'CoreModelsTransportMode',
        'transport_sub_mode': 'CoreModelsTransportSubMode'
    }

    attribute_map = {
        'name': 'name',
        'background_color': 'backgroundColor',
        'foreground_color': 'foregroundColor',
        'border_color': 'borderColor',
        'transport_mode': 'transportMode',
        'transport_sub_mode': 'transportSubMode'
    }

    def __init__(self, name=None, background_color=None, foreground_color=None, border_color=None, transport_mode=None,
                 transport_sub_mode=None, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._background_color = None
        self._foreground_color = None
        self._border_color = None
        self._transport_mode = None
        self._transport_sub_mode = None
        self.discriminator = None

        self.name = name
        self.background_color = background_color
        self.foreground_color = foreground_color
        self.border_color = border_color
        if transport_mode is not None:
            self.transport_mode = transport_mode
        if transport_sub_mode is not None:
            self.transport_sub_mode = transport_sub_mode

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name

    @property
    def background_color(self):
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        self._background_color = background_color

    @property
    def foreground_color(self):
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        self._foreground_color = foreground_color

    @property
    def border_color(self):
        return self._border_color

    @border_color.setter
    def border_color(self, border_color):
        self._border_color = border_color

    @property
    def transport_mode(self):
        return self._transport_mode

    @transport_mode.setter
    def transport_mode(self, transport_mode):
        self._transport_mode = transport_mode

    @property
    def transport_sub_mode(self):
        return self._transport_sub_mode

    @transport_sub_mode.setter
    def transport_sub_mode(self, transport_sub_mode):
        self._transport_sub_mode = transport_sub_mode

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneyDetailsLineDetailsApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneyDetailsLineDetailsApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneyDetailsCallDetailsApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'stop_point': 'JourneyDetailsStopPointApiModel',
        'planned_arrival_time': 'str',
        'planned_departure_time': 'str',
        'estimated_arrival_time': 'str',
        'estimated_departure_time': 'str',
        'estimated_otherwise_planned_arrival_time': 'str',
        'estimated_otherwise_planned_departure_time': 'str',
        'planned_platform': 'str',
        'estimated_platform': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'index': 'str',
        'is_on_trip_leg': 'bool',
        'is_trip_leg_start': 'bool',
        'is_trip_leg_stop': 'bool',
        'tariff_zones': 'list[JourneyDetailsTariffZoneApiModel]',
        'occupancy': 'OccupancyInformationApiModel',
        'is_cancelled': 'bool',
        'is_departure_cancelled': 'bool',
        'is_arrival_cancelled': 'bool'
    }

    attribute_map = {
        'stop_point': 'stopPoint',
        'planned_arrival_time': 'plannedArrivalTime',
        'planned_departure_time': 'plannedDepartureTime',
        'estimated_arrival_time': 'estimatedArrivalTime',
        'estimated_departure_time': 'estimatedDepartureTime',
        'estimated_otherwise_planned_arrival_time': 'estimatedOtherwisePlannedArrivalTime',
        'estimated_otherwise_planned_departure_time': 'estimatedOtherwisePlannedDepartureTime',
        'planned_platform': 'plannedPlatform',
        'estimated_platform': 'estimatedPlatform',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'index': 'index',
        'is_on_trip_leg': 'isOnTripLeg',
        'is_trip_leg_start': 'isTripLegStart',
        'is_trip_leg_stop': 'isTripLegStop',
        'tariff_zones': 'tariffZones',
        'occupancy': 'occupancy',
        'is_cancelled': 'isCancelled',
        'is_departure_cancelled': 'isDepartureCancelled',
        'is_arrival_cancelled': 'isArrivalCancelled'
    }

    def __init__(self, stop_point=None, planned_arrival_time=None, planned_departure_time=None,
                 estimated_arrival_time=None, estimated_departure_time=None,
                 estimated_otherwise_planned_arrival_time=None, estimated_otherwise_planned_departure_time=None,
                 planned_platform=None, estimated_platform=None, latitude=None, longitude=None, index=None,
                 is_on_trip_leg=None, is_trip_leg_start=None, is_trip_leg_stop=None, tariff_zones=None, occupancy=None,
                 is_cancelled=None, is_departure_cancelled=None, is_arrival_cancelled=None,
                 local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._stop_point = None
        self._planned_arrival_time = None
        self._planned_departure_time = None
        self._estimated_arrival_time = None
        self._estimated_departure_time = None
        self._estimated_otherwise_planned_arrival_time = None
        self._estimated_otherwise_planned_departure_time = None
        self._planned_platform = None
        self._estimated_platform = None
        self._latitude = None
        self._longitude = None
        self._index = None
        self._is_on_trip_leg = None
        self._is_trip_leg_start = None
        self._is_trip_leg_stop = None
        self._tariff_zones = None
        self._occupancy = None
        self._is_cancelled = None
        self._is_departure_cancelled = None
        self._is_arrival_cancelled = None
        self.discriminator = None

        self.stop_point = stop_point
        self.planned_arrival_time = planned_arrival_time
        self.planned_departure_time = planned_departure_time
        self.estimated_arrival_time = estimated_arrival_time
        self.estimated_departure_time = estimated_departure_time
        self.estimated_otherwise_planned_arrival_time = estimated_otherwise_planned_arrival_time
        self.estimated_otherwise_planned_departure_time = estimated_otherwise_planned_departure_time
        self.planned_platform = planned_platform
        self.estimated_platform = estimated_platform
        self.latitude = latitude
        self.longitude = longitude
        self.index = index
        self.is_on_trip_leg = is_on_trip_leg
        self.is_trip_leg_start = is_trip_leg_start
        self.is_trip_leg_stop = is_trip_leg_stop
        self.tariff_zones = tariff_zones
        if occupancy is not None:
            self.occupancy = occupancy
        if is_cancelled is not None:
            self.is_cancelled = is_cancelled
        self.is_departure_cancelled = is_departure_cancelled
        self.is_arrival_cancelled = is_arrival_cancelled

    @property
    def stop_point(self):
        """Gets the stop_point of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501


        :return: The stop_point of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: JourneyDetailsStopPointApiModel
        """
        return self._stop_point

    @stop_point.setter
    def stop_point(self, stop_point):
        """Sets the stop_point of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.


        :param stop_point: The stop_point of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type stop_point: JourneyDetailsStopPointApiModel
        """
        if self.local_vars_configuration.client_side_validation and stop_point is None:  # noqa: E501
            raise ValueError("Invalid value for `stop_point`, must not be `None`")  # noqa: E501

        self._stop_point = stop_point

    @property
    def planned_arrival_time(self):
        """Gets the planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The planned arrival time for the call in RFC 3339 format.  # noqa: E501

        :return: The planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._planned_arrival_time

    @planned_arrival_time.setter
    def planned_arrival_time(self, planned_arrival_time):
        """Sets the planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The planned arrival time for the call in RFC 3339 format.  # noqa: E501

        :param planned_arrival_time: The planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type planned_arrival_time: str
        """

        self._planned_arrival_time = planned_arrival_time

    @property
    def planned_departure_time(self):
        """Gets the planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The planned departure time for the call in RFC 3339 format.  # noqa: E501

        :return: The planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._planned_departure_time

    @planned_departure_time.setter
    def planned_departure_time(self, planned_departure_time):
        """Sets the planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The planned departure time for the call in RFC 3339 format.  # noqa: E501

        :param planned_departure_time: The planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type planned_departure_time: str
        """

        self._planned_departure_time = planned_departure_time

    @property
    def estimated_arrival_time(self):
        """Gets the estimated_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The estimated arrival time for the call in RFC 3339 format.  # noqa: E501

        :return: The estimated_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_arrival_time

    @estimated_arrival_time.setter
    def estimated_arrival_time(self, estimated_arrival_time):
        """Sets the estimated_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The estimated arrival time for the call in RFC 3339 format.  # noqa: E501

        :param estimated_arrival_time: The estimated_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type estimated_arrival_time: str
        """

        self._estimated_arrival_time = estimated_arrival_time

    @property
    def estimated_departure_time(self):
        """Gets the estimated_departure_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The estimated departure time for the call in RFC 3339 format.  # noqa: E501

        :return: The estimated_departure_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_departure_time

    @estimated_departure_time.setter
    def estimated_departure_time(self, estimated_departure_time):
        """Sets the estimated_departure_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The estimated departure time for the call in RFC 3339 format.  # noqa: E501

        :param estimated_departure_time: The estimated_departure_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type estimated_departure_time: str
        """

        self._estimated_departure_time = estimated_departure_time

    @property
    def estimated_otherwise_planned_arrival_time(self):
        """Gets the estimated_otherwise_planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The best known time of the call in RFC 3339 format. Is EstimatedArrivalTime if exists, otherwise PlannedArrivalTime.  # noqa: E501

        :return: The estimated_otherwise_planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_otherwise_planned_arrival_time

    @estimated_otherwise_planned_arrival_time.setter
    def estimated_otherwise_planned_arrival_time(self, estimated_otherwise_planned_arrival_time):
        """Sets the estimated_otherwise_planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The best known time of the call in RFC 3339 format. Is EstimatedArrivalTime if exists, otherwise PlannedArrivalTime.  # noqa: E501

        :param estimated_otherwise_planned_arrival_time: The estimated_otherwise_planned_arrival_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type estimated_otherwise_planned_arrival_time: str
        """

        self._estimated_otherwise_planned_arrival_time = estimated_otherwise_planned_arrival_time

    @property
    def estimated_otherwise_planned_departure_time(self):
        """Gets the estimated_otherwise_planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The best known time of the call in RFC 3339 format. Is EstimatedDepartureTime if exists, otherwise PlannedDepartureTime.  # noqa: E501

        :return: The estimated_otherwise_planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_otherwise_planned_departure_time

    @estimated_otherwise_planned_departure_time.setter
    def estimated_otherwise_planned_departure_time(self, estimated_otherwise_planned_departure_time):
        """Sets the estimated_otherwise_planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The best known time of the call in RFC 3339 format. Is EstimatedDepartureTime if exists, otherwise PlannedDepartureTime.  # noqa: E501

        :param estimated_otherwise_planned_departure_time: The estimated_otherwise_planned_departure_time of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type estimated_otherwise_planned_departure_time: str
        """

        self._estimated_otherwise_planned_departure_time = estimated_otherwise_planned_departure_time

    @property
    def planned_platform(self):
        """Gets the planned_platform of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The planned platform of the call.  # noqa: E501

        :return: The planned_platform of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._planned_platform

    @planned_platform.setter
    def planned_platform(self, planned_platform):
        """Sets the planned_platform of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The planned platform of the call.  # noqa: E501

        :param planned_platform: The planned_platform of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type planned_platform: str
        """

        self._planned_platform = planned_platform

    @property
    def estimated_platform(self):
        """Gets the estimated_platform of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The estimated platform of the call.  # noqa: E501

        :return: The estimated_platform of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_platform

    @estimated_platform.setter
    def estimated_platform(self, estimated_platform):
        """Sets the estimated_platform of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The estimated platform of the call.  # noqa: E501

        :param estimated_platform: The estimated_platform of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type estimated_platform: str
        """

        self._estimated_platform = estimated_platform

    @property
    def latitude(self):
        """Gets the latitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The latitude of the stop point of the call.  # noqa: E501

        :return: The latitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The latitude of the stop point of the call.  # noqa: E501

        :param latitude: The latitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The longitude of the stop point of the call.  # noqa: E501

        :return: The longitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The longitude of the stop point of the call.  # noqa: E501

        :param longitude: The longitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def index(self):
        """Gets the index of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The index of the stop point of the call.  # noqa: E501

        :return: The index of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The index of the stop point of the call.  # noqa: E501

        :param index: The index of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type index: str
        """

        self._index = index

    @property
    def is_on_trip_leg(self):
        """Gets the is_on_trip_leg of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The call is on the trip leg.  # noqa: E501

        :return: The is_on_trip_leg of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_on_trip_leg

    @is_on_trip_leg.setter
    def is_on_trip_leg(self, is_on_trip_leg):
        """Sets the is_on_trip_leg of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The call is on the trip leg.  # noqa: E501

        :param is_on_trip_leg: The is_on_trip_leg of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type is_on_trip_leg: bool
        """

        self._is_on_trip_leg = is_on_trip_leg

    @property
    def is_trip_leg_start(self):
        """Gets the is_trip_leg_start of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The call is the first on the trip leg.  # noqa: E501

        :return: The is_trip_leg_start of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_trip_leg_start

    @is_trip_leg_start.setter
    def is_trip_leg_start(self, is_trip_leg_start):
        """Sets the is_trip_leg_start of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The call is the first on the trip leg.  # noqa: E501

        :param is_trip_leg_start: The is_trip_leg_start of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type is_trip_leg_start: bool
        """

        self._is_trip_leg_start = is_trip_leg_start

    @property
    def is_trip_leg_stop(self):
        """Gets the is_trip_leg_stop of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The call is the last on the trip leg.  # noqa: E501

        :return: The is_trip_leg_stop of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_trip_leg_stop

    @is_trip_leg_stop.setter
    def is_trip_leg_stop(self, is_trip_leg_stop):
        """Sets the is_trip_leg_stop of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The call is the last on the trip leg.  # noqa: E501

        :param is_trip_leg_stop: The is_trip_leg_stop of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type is_trip_leg_stop: bool
        """

        self._is_trip_leg_stop = is_trip_leg_stop

    @property
    def tariff_zones(self):
        """Gets the tariff_zones of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        The primary tariff zone of the call. A call can be related to a stop area with multiple tariff zones  and this is the zone that for example should be displayed in overviews etc.  # noqa: E501

        :return: The tariff_zones of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: list[JourneyDetailsTariffZoneApiModel]
        """
        return self._tariff_zones

    @tariff_zones.setter
    def tariff_zones(self, tariff_zones):
        """Sets the tariff_zones of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        The primary tariff zone of the call. A call can be related to a stop area with multiple tariff zones  and this is the zone that for example should be displayed in overviews etc.  # noqa: E501

        :param tariff_zones: The tariff_zones of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type tariff_zones: list[JourneyDetailsTariffZoneApiModel]
        """

        self._tariff_zones = tariff_zones

    @property
    def occupancy(self):
        """Gets the occupancy of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501


        :return: The occupancy of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.


        :param occupancy: The occupancy of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type occupancy: VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel
        """

        self._occupancy = occupancy

    @property
    def is_cancelled(self):
        """Gets the is_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        Flag indicating if the call is cancelled.  # noqa: E501

        :return: The is_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        """Sets the is_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        Flag indicating if the call is cancelled.  # noqa: E501

        :param is_cancelled: The is_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type is_cancelled: bool
        """

        self._is_cancelled = is_cancelled

    @property
    def is_departure_cancelled(self):
        """Gets the is_departure_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        Flag indicating if the departure is cancelled.  # noqa: E501

        :return: The is_departure_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_departure_cancelled

    @is_departure_cancelled.setter
    def is_departure_cancelled(self, is_departure_cancelled):
        """Sets the is_departure_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        Flag indicating if the departure is cancelled.  # noqa: E501

        :param is_departure_cancelled: The is_departure_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type is_departure_cancelled: bool
        """

        self._is_departure_cancelled = is_departure_cancelled

    @property
    def is_arrival_cancelled(self):
        """Gets the is_arrival_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501

        Flag indicating if the arrival is cancelled.  # noqa: E501

        :return: The is_arrival_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_arrival_cancelled

    @is_arrival_cancelled.setter
    def is_arrival_cancelled(self, is_arrival_cancelled):
        """Sets the is_arrival_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.

        Flag indicating if the arrival is cancelled.  # noqa: E501

        :param is_arrival_cancelled: The is_arrival_cancelled of this VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.  # noqa: E501
        :type is_arrival_cancelled: bool
        """

        self._is_arrival_cancelled = is_arrival_cancelled

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneyDetailsCallDetailsApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneyDetailsCallDetailsApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneyDetailsStopPointApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'gid': 'str',
        'name': 'str',
        'platform': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'stop_area': 'JourneyDetailsStopAreaApiModel'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'platform': 'platform',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'stop_area': 'stopArea'
    }

    def __init__(self, gid=None, name=None, platform=None, latitude=None, longitude=None, stop_area=None,
                 local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._platform = None
        self._latitude = None
        self._longitude = None
        self._stop_area = None
        self.discriminator = None

        self.gid = gid
        self.name = name
        self.platform = platform
        self.latitude = latitude
        self.longitude = longitude
        if stop_area is not None:
            self.stop_area = stop_area

    @property
    def gid(self):
        """Gets the gid of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501

        The 16-digit Västtrafik gid of the stop point.  # noqa: E501

        :return: The gid of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.

        The 16-digit Västtrafik gid of the stop point.  # noqa: E501

        :param gid: The gid of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501
        :type gid: str
        """
        if self.local_vars_configuration.client_side_validation and gid is None:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                gid is not None and len(gid) < 1):
            raise ValueError("Invalid value for `gid`, length must be greater than or equal to `1`")  # noqa: E501

        self._gid = gid

    @property
    def name(self):
        """Gets the name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501

        The stop point name.  # noqa: E501

        :return: The name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.

        The stop point name.  # noqa: E501

        :param name: The name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501

        The platform of the stop point.  # noqa: E501

        :return: The platform of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.

        The platform of the stop point.  # noqa: E501

        :param platform: The platform of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501
        :type platform: str
        """

        self._platform = platform

    @property
    def latitude(self):
        """Gets the latitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501

        The latitude coordinate of the stop point.  # noqa: E501

        :return: The latitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.

        The latitude coordinate of the stop point.  # noqa: E501

        :param latitude: The latitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501

        The longitude coordinate of the stop point.  # noqa: E501

        :return: The longitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.

        The longitude coordinate of the stop point.  # noqa: E501

        :param longitude: The longitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def stop_area(self):
        """Gets the stop_area of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501


        :return: The stop_area of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501
        :rtype: JourneyDetailsStopAreaApiModel
        """
        return self._stop_area

    @stop_area.setter
    def stop_area(self, stop_area):
        """Sets the stop_area of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.


        :param stop_area: The stop_area of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.  # noqa: E501
        :type stop_area: JourneyDetailsStopAreaApiModel
        """

        self._stop_area = stop_area

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneyDetailsStopPointApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneyDetailsStopPointApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneyDetailsStopAreaApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'gid': 'str',
        'name': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'tariff_zone1': 'JourneyDetailsTariffZoneApiModel',
        'tariff_zone2': 'JourneyDetailsTariffZoneApiModel'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'tariff_zone1': 'tariffZone1',
        'tariff_zone2': 'tariffZone2'
    }

    def __init__(self, gid=None, name=None, latitude=None, longitude=None, tariff_zone1=None, tariff_zone2=None,
                 local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._latitude = None
        self._longitude = None
        self._tariff_zone1 = None
        self._tariff_zone2 = None
        self.discriminator = None

        self.gid = gid
        self.name = name
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if tariff_zone1 is not None:
            self.tariff_zone1 = tariff_zone1
        if tariff_zone2 is not None:
            self.tariff_zone2 = tariff_zone2

    @property
    def gid(self):
        """Gets the gid of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501

        The 16-digit Västtrafik gid of the stop area.  # noqa: E501

        :return: The gid of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.

        The 16-digit Västtrafik gid of the stop area.  # noqa: E501

        :param gid: The gid of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501
        :type gid: str
        """

        self._gid = gid

    @property
    def name(self):
        """Gets the name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501

        The stop area name.  # noqa: E501

        :return: The name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.

        The stop area name.  # noqa: E501

        :param name: The name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def latitude(self):
        """Gets the latitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501

        The latitude of the stop point.  # noqa: E501

        :return: The latitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.

        The latitude of the stop point.  # noqa: E501

        :param latitude: The latitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501

        The longitude of the stop point.  # noqa: E501

        :return: The longitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.

        The longitude of the stop point.  # noqa: E501

        :param longitude: The longitude of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def tariff_zone1(self):
        """Gets the tariff_zone1 of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501


        :return: The tariff_zone1 of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501
        :rtype: JourneyDetailsTariffZoneApiModel
        """
        return self._tariff_zone1

    @tariff_zone1.setter
    def tariff_zone1(self, tariff_zone1):
        """Sets the tariff_zone1 of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.


        :param tariff_zone1: The tariff_zone1 of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501
        :type tariff_zone1: JourneyDetailsTariffZoneApiModel
        """

        self._tariff_zone1 = tariff_zone1

    @property
    def tariff_zone2(self):
        """Gets the tariff_zone2 of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501


        :return: The tariff_zone2 of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501
        :rtype: JourneyDetailsTariffZoneApiModel
        """
        return self._tariff_zone2

    @tariff_zone2.setter
    def tariff_zone2(self, tariff_zone2):
        """Sets the tariff_zone2 of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.


        :param tariff_zone2: The tariff_zone2 of this VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.  # noqa: E501
        :type tariff_zone2: JourneyDetailsTariffZoneApiModel
        """

        self._tariff_zone2 = tariff_zone2

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneyDetailsStopAreaApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneyDetailsStopAreaApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneyDetailsTariffZoneApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'gid': 'str',
        'name': 'str',
        'number': 'int',
        'short_name': 'str'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'number': 'number',
        'short_name': 'shortName'
    }

    def __init__(self, gid=None, name=None, number=None, short_name=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._number = None
        self._short_name = None
        self.discriminator = None

        self.gid = gid
        self.name = name
        if number is not None:
            self.number = number
        self.short_name = short_name

    @property
    def gid(self):
        """Gets the gid of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.  # noqa: E501

        The 16-digit Västtrafik gid of the tariff zone.  # noqa: E501

        :return: The gid of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.

        The 16-digit Västtrafik gid of the tariff zone.  # noqa: E501

        :param gid: The gid of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.  # noqa: E501
        :type gid: str
        """

        self._gid = gid

    @property
    def name(self):
        """Gets the name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.  # noqa: E501

        The name of the tariff zone.  # noqa: E501

        :return: The name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.

        The name of the tariff zone.  # noqa: E501

        :param name: The name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.  # noqa: E501

        The tariff zone number.  # noqa: E501

        :return: The number of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.

        The tariff zone number.  # noqa: E501

        :param number: The number of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.  # noqa: E501
        :type number: int
        """

        self._number = number

    @property
    def short_name(self):
        """Gets the short_name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.  # noqa: E501

        The short name of the tariff zone.  # noqa: E501

        :return: The short_name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.

        The short name of the tariff zone.  # noqa: E501

        :param short_name: The short_name of this VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.  # noqa: E501
        :type short_name: str
        """

        self._short_name = short_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneyDetailsTariffZoneApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneyDetailsTariffZoneApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneysCallApiModel(object):
    api_types = {
        'stop_point': 'JourneysStopPointApiModel',
        'planned_time': 'str',
        'estimated_time': 'str',
        'estimated_otherwise_planned_time': 'str',
        'notes': 'list[CoreModelsNote]'
    }

    attribute_map = {
        'stop_point': 'stopPoint',
        'planned_time': 'plannedTime',
        'estimated_time': 'estimatedTime',
        'estimated_otherwise_planned_time': 'estimatedOtherwisePlannedTime',
        'notes': 'notes'
    }

    def __init__(self, stop_point=None, planned_time=None, estimated_time=None, estimated_otherwise_planned_time=None,
                 notes=None, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._stop_point = None
        self._planned_time = None
        self._estimated_time = None
        self._estimated_otherwise_planned_time = None
        self._notes = None
        self.discriminator = None

        self.stop_point = stop_point
        self.planned_time = planned_time
        self.estimated_time = estimated_time
        self.estimated_otherwise_planned_time = estimated_otherwise_planned_time
        self.notes = notes

    @property
    def stop_point(self):
        return self._stop_point

    @stop_point.setter
    def stop_point(self, stop_point):
        if self.local_vars_configuration.client_side_validation and stop_point is None:  # noqa: E501
            raise ValueError("Invalid value for `stop_point`, must not be `None`")  # noqa: E501

        self._stop_point = stop_point

    @property
    def planned_time(self):
        return self._planned_time

    @planned_time.setter
    def planned_time(self, planned_time):
        if self.local_vars_configuration.client_side_validation and planned_time is None:  # noqa: E501
            raise ValueError("Invalid value for `planned_time`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                planned_time is not None and len(planned_time) < 1):
            raise ValueError(
                "Invalid value for `planned_time`, length must be greater than or equal to `1`")  # noqa: E501

        self._planned_time = planned_time

    @property
    def estimated_time(self):
        return self._estimated_time

    @estimated_time.setter
    def estimated_time(self, estimated_time):

        self._estimated_time = estimated_time

    @property
    def estimated_otherwise_planned_time(self):
        return self._estimated_otherwise_planned_time

    @estimated_otherwise_planned_time.setter
    def estimated_otherwise_planned_time(self, estimated_otherwise_planned_time):
        self._estimated_otherwise_planned_time = estimated_otherwise_planned_time

    @property
    def notes(self):
        return self._notes

    @notes.setter
    def notes(self, notes):
        self._notes = notes

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneysCallApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneysCallApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneysStopPointApiModel(object):
    api_types = {
        'gid': 'str',
        'name': 'str',
        'platform': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'stop_area': 'JourneysStopAreaApiModel'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'platform': 'platform',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'stop_area': 'stopArea'
    }

    def __init__(self, gid=None, name=None, platform=None, latitude=None, longitude=None, stop_area=None,
                 local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._platform = None
        self._latitude = None
        self._longitude = None
        self._stop_area = None
        self.discriminator = None

        self.gid = gid
        self.name = name
        self.platform = platform
        self.latitude = latitude
        self.longitude = longitude
        if stop_area is not None:
            self.stop_area = stop_area

    @property
    def gid(self):
        return self._gid

    @gid.setter
    def gid(self, gid):
        if self.local_vars_configuration.client_side_validation and gid is None:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                gid is not None and len(gid) < 1):
            raise ValueError("Invalid value for `gid`, length must be greater than or equal to `1`")  # noqa: E501

        self._gid = gid

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def platform(self):
        return self._platform

    @platform.setter
    def platform(self, platform):
        self._platform = platform

    @property
    def latitude(self):
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        self._latitude = latitude

    @property
    def longitude(self):
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        self._longitude = longitude

    @property
    def stop_area(self):
        return self._stop_area

    @stop_area.setter
    def stop_area(self, stop_area):
        self._stop_area = stop_area

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneysStopPointApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneysStopPointApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneysStopAreaApiModel(object):
    api_types = {
        'gid': 'str',
        'name': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'tariff_zone1': 'JourneysTariffZoneApiModel',
        'tariff_zone2': 'JourneysTariffZoneApiModel'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'tariff_zone1': 'tariffZone1',
        'tariff_zone2': 'tariffZone2'
    }

    def __init__(self, gid=None, name=None, latitude=None, longitude=None, tariff_zone1=None, tariff_zone2=None,
                 local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._latitude = None
        self._longitude = None
        self._tariff_zone1 = None
        self._tariff_zone2 = None
        self.discriminator = None

        self.gid = gid
        self.name = name
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if tariff_zone1 is not None:
            self.tariff_zone1 = tariff_zone1
        if tariff_zone2 is not None:
            self.tariff_zone2 = tariff_zone2

    @property
    def gid(self):
        return self._gid

    @gid.setter
    def gid(self, gid):
        self._gid = gid

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name

    @property
    def latitude(self):
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        self._latitude = latitude

    @property
    def longitude(self):
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        self._longitude = longitude

    @property
    def tariff_zone1(self):
        return self._tariff_zone1

    @tariff_zone1.setter
    def tariff_zone1(self, tariff_zone1):
        self._tariff_zone1 = tariff_zone1

    @property
    def tariff_zone2(self):
        return self._tariff_zone2

    @tariff_zone2.setter
    def tariff_zone2(self, tariff_zone2):
        self._tariff_zone2 = tariff_zone2

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneysStopAreaApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneysStopAreaApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneysTariffZoneApiModel(object):
    api_types = {
        'gid': 'str',
        'name': 'str',
        'number': 'int',
        'short_name': 'str'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'number': 'number',
        'short_name': 'shortName'
    }

    def __init__(self, gid=None, name=None, number=None, short_name=None, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._number = None
        self._short_name = None
        self.discriminator = None

        self.gid = gid
        self.name = name
        if number is not None:
            self.number = number
        self.short_name = short_name

    @property
    def gid(self):
        return self._gid

    @gid.setter
    def gid(self, gid):
        self._gid = gid

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name

    @property
    def number(self):
        return self._number

    @number.setter
    def number(self, number):
        self._number = number

    @property
    def short_name(self):
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        self._short_name = short_name

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneysTariffZoneApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneysTariffZoneApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneysServiceJourneyApiModel(object):
    api_types = {
        'gid': 'str',
        'direction': 'str',
        'number': 'str',
        'line': 'JourneysLineApiModel'
    }

    attribute_map = {
        'gid': 'gid',
        'direction': 'direction',
        'number': 'number',
        'line': 'line'
    }

    def __init__(self, gid=None, direction=None, number=None, line=None, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._direction = None
        self._number = None
        self._line = None
        self.discriminator = None

        self.gid = gid
        self.direction = direction
        self.number = number
        if line is not None:
            self.line = line

    @property
    def gid(self):
        return self._gid

    @gid.setter
    def gid(self, gid):
        if self.local_vars_configuration.client_side_validation and gid is None:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                gid is not None and len(gid) < 1):
            raise ValueError("Invalid value for `gid`, length must be greater than or equal to `1`")  # noqa: E501

        self._gid = gid

    @property
    def direction(self):
        return self._direction

    @direction.setter
    def direction(self, direction):
        self._direction = direction

    @property
    def number(self):
        return self._number

    @number.setter
    def number(self, number):
        self._number = number

    @property
    def line(self):
        return self._line

    @line.setter
    def line(self, line):
        self._line = line

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneysServiceJourneyApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneysServiceJourneyApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneysLineApiModel(object):
    api_types = {
        'name': 'str',
        'background_color': 'str',
        'foreground_color': 'str',
        'border_color': 'str',
        'transport_mode': 'CoreModelsTransportMode',
        'transport_sub_mode': 'CoreModelsTransportSubMode',
        'short_name': 'str',
        'designation': 'str',
        'is_wheelchair_accessible': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'background_color': 'backgroundColor',
        'foreground_color': 'foregroundColor',
        'border_color': 'borderColor',
        'transport_mode': 'CoreModelsTransportMode',
        'transport_sub_mode': 'CoreModelsTransportSubMode',
        'short_name': 'shortName',
        'designation': 'designation',
        'is_wheelchair_accessible': 'isWheelchairAccessible'
    }

    def __init__(self, name=None, background_color=None, foreground_color=None, border_color=None, transport_mode=None,
                 transport_sub_mode=None, short_name=None, designation=None, is_wheelchair_accessible=None,
                 local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._background_color = None
        self._foreground_color = None
        self._border_color = None
        self._transport_mode = None
        self._transport_sub_mode = None
        self._short_name = None
        self._designation = None
        self._is_wheelchair_accessible = None
        self.discriminator = None

        self.name = name
        self.background_color = background_color
        self.foreground_color = foreground_color
        self.border_color = border_color
        if transport_mode is not None:
            self.transport_mode = transport_mode
        if transport_sub_mode is not None:
            self.transport_sub_mode = transport_sub_mode
        self.short_name = short_name
        self.designation = designation
        if is_wheelchair_accessible is not None:
            self.is_wheelchair_accessible = is_wheelchair_accessible

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name

    @property
    def background_color(self):
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        self._background_color = background_color

    @property
    def foreground_color(self):
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        self._foreground_color = foreground_color

    @property
    def border_color(self):
        return self._border_color

    @border_color.setter
    def border_color(self, border_color):
        self._border_color = border_color

    @property
    def transport_mode(self):
        return self._transport_mode

    @transport_mode.setter
    def transport_mode(self, transport_mode):
        self._transport_mode = transport_mode

    @property
    def transport_sub_mode(self):
        return self._transport_sub_mode

    @transport_sub_mode.setter
    def transport_sub_mode(self, transport_sub_mode):
        self._transport_sub_mode = transport_sub_mode

    @property
    def short_name(self):
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        self._short_name = short_name

    @property
    def designation(self):
        return self._designation

    @designation.setter
    def designation(self, designation):
        self._designation = designation

    @property
    def is_wheelchair_accessible(self):
        return self._is_wheelchair_accessible

    @is_wheelchair_accessible.setter
    def is_wheelchair_accessible(self, is_wheelchair_accessible):
        self._is_wheelchair_accessible = is_wheelchair_accessible

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneysLineApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneysLineApiModel):
            return True

        return self.to_dict() != other.to_dict()


class CoreModelsTransportMode(object):
    UNKNOWN = "unknown"
    NONE = "none"
    TRAM = "tram"
    BUS = "bus"
    FERRY = "ferry"
    TRAIN = "train"
    TAXI = "taxi"
    WALK = "walk"
    BIKE = "bike"
    CAR = "car"

    allowable_values = [UNKNOWN, NONE, TRAM, BUS, FERRY, TRAIN, TAXI, WALK, BIKE, CAR]  # noqa: E501

    api_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreModelsTransportMode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CoreModelsTransportMode):
            return True

        return self.to_dict() != other.to_dict()


class CoreModelsTransportSubMode(object):
    UNKNOWN = "unknown"
    NONE = "none"
    VASTTAGEN = "vasttagen"
    LONGDISTANCETRAIN = "longdistancetrain"
    REGIONALTRAIN = "regionaltrain"

    allowable_values = [UNKNOWN, NONE, VASTTAGEN, LONGDISTANCETRAIN, REGIONALTRAIN]  # noqa: E501

    api_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreModelsTransportSubMode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CoreModelsTransportSubMode):
            return True

        return self.to_dict() != other.to_dict()


class JourneyDetailsJourneyDetailsApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'departure_access_link': 'JourneyDetailsDepartureAccessLinkApiModel',
        'trip_legs': 'list[JourneyDetailsTripLegDetailsApiModel]',
        'connection_links': 'list[JourneyDetailsConnectionLinkApiModel]',
        'arrival_access_link': 'JourneyDetailsArrivalAccessLinkApiModel',
        'destination_link': 'JourneyDetailsDestinationLinkApiModel',
        'ticket_suggestions_result': 'JourneyDetailsTicketSuggestionsResultApiModel',
        'tariff_zones': 'list[JourneyDetailsTariffZoneApiModel]',
        'occupancy': 'OccupancyInformationApiModel'
    }

    attribute_map = {
        'departure_access_link': 'departureAccessLink',
        'trip_legs': 'tripLegs',
        'connection_links': 'connectionLinks',
        'arrival_access_link': 'arrivalAccessLink',
        'destination_link': 'destinationLink',
        'ticket_suggestions_result': 'ticketSuggestionsResult',
        'tariff_zones': 'tariffZones',
        'occupancy': 'occupancy'
    }

    def __init__(self, departure_access_link=None, trip_legs=None, connection_links=None, arrival_access_link=None,
                 destination_link=None, ticket_suggestions_result=None, tariff_zones=None, occupancy=None,
                 local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._departure_access_link = None
        self._trip_legs = None
        self._connection_links = None
        self._arrival_access_link = None
        self._destination_link = None
        self._ticket_suggestions_result = None
        self._tariff_zones = None
        self._occupancy = None
        self.discriminator = None

        if departure_access_link is not None:
            self.departure_access_link = departure_access_link
        self.trip_legs = trip_legs
        self.connection_links = connection_links
        if arrival_access_link is not None:
            self.arrival_access_link = arrival_access_link
        if destination_link is not None:
            self.destination_link = destination_link
        if ticket_suggestions_result is not None:
            self.ticket_suggestions_result = ticket_suggestions_result
        self.tariff_zones = tariff_zones
        if occupancy is not None:
            self.occupancy = occupancy

    @property
    def departure_access_link(self):
        return self._departure_access_link

    @departure_access_link.setter
    def departure_access_link(self, departure_access_link):
        self._departure_access_link = departure_access_link

    @property
    def trip_legs(self):
        return self._trip_legs

    @trip_legs.setter
    def trip_legs(self, trip_legs):
        self._trip_legs = trip_legs

    @property
    def connection_links(self):
        return self._connection_links

    @connection_links.setter
    def connection_links(self, connection_links):
        self._connection_links = connection_links

    @property
    def arrival_access_link(self):
        return self._arrival_access_link

    @arrival_access_link.setter
    def arrival_access_link(self, arrival_access_link):
        self._arrival_access_link = arrival_access_link

    @property
    def destination_link(self):
        return self._destination_link

    @destination_link.setter
    def destination_link(self, destination_link):
        self._destination_link = destination_link

    @property
    def ticket_suggestions_result(self):
        return self._ticket_suggestions_result

    @ticket_suggestions_result.setter
    def ticket_suggestions_result(self, ticket_suggestions_result):
        self._ticket_suggestions_result = ticket_suggestions_result

    @property
    def tariff_zones(self):
        return self._tariff_zones

    @tariff_zones.setter
    def tariff_zones(self, tariff_zones):
        self._tariff_zones = tariff_zones

    @property
    def occupancy(self):
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        self._occupancy = occupancy

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneyDetailsJourneyDetailsApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneyDetailsJourneyDetailsApiModel):
            return True

        return self.to_dict() != other.to_dict()


class LocationsGetLocationsResponse(object):
    api_types = {
        'results': 'list[LocationsLocationApiModel]',
        'pagination': 'PaginationProperties',
        'links': 'PaginationLinks'
    }
    attribute_map = {
        'results': 'results',
        'pagination': 'pagination',
        'links': 'links'
    }

    def __init__(self, results=None, pagination=None, links=None, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._results = None
        self._pagination = None
        self._links = None
        self.discriminator = None

        self.results = results
        if pagination is not None:
            self.pagination = pagination
        if links is not None:
            self.links = links

        @property
        def results(self):
            print(self._results)
            return self._results

        @results.setter
        def results(self, results):
            self._results = results

        @property
        def pagination(self):
            return self._pagination

        @pagination.setter
        def pagination(self, pagination):
            self._pagination = pagination

        @property
        def links(self):
            return self._links

        @links.setter
        def links(self, links):
            self._links = links

        def to_dict(self, serialize=False):
            result = {}

            def convert(x):
                if hasattr(x, "to_dict"):
                    args = getfullargspec(x.to_dict).args
                    if len(args) == 1:
                        return x.to_dict()
                    else:
                        return x.to_dict(serialize)
                else:
                    return x

            for attr, _ in six.iteritems(self.api_types):
                value = getattr(self, attr)
                attr = self.attribute_map.get(attr, attr) if serialize else attr
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: convert(x),
                        value
                    ))
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], convert(item[1])),
                        value.items()
                    ))
                else:
                    result[attr] = convert(value)

            return result

        def to_str(self):
            return pprint.pformat(self.to_dict())

        def __repr__(self):
            return self.to_str()

        def __eq__(self, other):
            """Returns true if both objects are equal"""
            if not isinstance(other, LocationsGetLocationsResponse):
                return False

            return self.to_dict() == other.to_dict()

        def __ne__(self, other):
            """Returns true if both objects are not equal"""
            if not isinstance(other, LocationsGetLocationsResponse):
                return True

            return self.to_dict() != other.to_dict()


class LocationsLocationApiModel(object):
    api_types = {
        'gid': 'str',
        'name': 'str',
        'location_type': 'CoreModelsLocationType',
        'latitude': 'float',
        'longitude': 'float',
        'platform': 'str',
        'straight_line_distance_in_meters': 'int',
        'has_local_service': 'bool'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'location_type': 'locationType',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'platform': 'platform',
        'straight_line_distance_in_meters': 'straightLineDistanceInMeters',
        'has_local_service': 'hasLocalService'
    }

    def __init__(self, gid=None, name=None, location_type=None, latitude=None, longitude=None, platform=None,
                 straight_line_distance_in_meters=None, has_local_service=None,
                 local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._location_type = None
        self._latitude = None
        self._longitude = None
        self._platform = None
        self._straight_line_distance_in_meters = None
        self._has_local_service = None
        self.discriminator = None

        self.gid = gid
        self.name = name
        self.location_type = location_type
        self.latitude = latitude
        self.longitude = longitude
        self.platform = platform
        self.straight_line_distance_in_meters = straight_line_distance_in_meters
        self.has_local_service = has_local_service

    @property
    def gid(self):
        return self._gid

    @gid.setter
    def gid(self, gid):
        self._gid = gid

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def location_type(self):
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        if self.local_vars_configuration.client_side_validation and location_type is None:  # noqa: E501
            raise ValueError("Invalid value for `location_type`, must not be `None`")  # noqa: E501

        self._location_type = location_type

    @property
    def latitude(self):
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        self._latitude = latitude

    @property
    def longitude(self):
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        self._longitude = longitude

    @property
    def platform(self):
        return self._platform

    @platform.setter
    def platform(self, platform):
        self._platform = platform

    @property
    def straight_line_distance_in_meters(self):
        return self._straight_line_distance_in_meters

    @straight_line_distance_in_meters.setter
    def straight_line_distance_in_meters(self, straight_line_distance_in_meters):
        self._straight_line_distance_in_meters = straight_line_distance_in_meters

    @property
    def has_local_service(self):
        return self._has_local_service

    @has_local_service.setter
    def has_local_service(self, has_local_service):
        self._has_local_service = has_local_service

    def to_dict(self, serialize=False):
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationsLocationApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocationsLocationApiModel):
            return True

        return self.to_dict() != other.to_dict()


class PaginationProperties(object):
    api_types = {
        'limit': 'int',
        'offset': 'int',
        'size': 'int'
    }
    attribute_map = {
        'limit': 'limit',
        'offset': 'offset',
        'size': 'size'
    }

    def __init__(self, limit=None, offset=None, size=None, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._limit = None
        self._offset = None
        self._size = None
        self.discriminator = None

        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if size is not None:
            self.size = size

    @property
    def limit(self):
        return self._limit

    @limit.setter
    def limit(self, limit):
        self._limit = limit

    @property
    def offset(self):
        return self._offset

    @offset.setter
    def offset(self, offset):
        self._offset = offset

    @property
    def size(self):
        return self._size

    @size.setter
    def size(self, size):
        self._size = size

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaginationProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaginationProperties):
            return True

        return self.to_dict() != other.to_dict()


class PaginationLinks(object):
    api_types = {
        'previous': 'str',
        'next': 'str',
        'current': 'str'
    }
    attribute_map = {
        'previous': 'previous',
        'next': 'next',
        'current': 'current'
    }

    def __init__(self, previous=None, next=None, current=None, local_vars_configuration=None):  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._previous = None
        self._next = None
        self._current = None
        self.discriminator = None

        self.previous = previous
        self.next = next
        self.current = current

    @property
    def previous(self):
        return self._previous

    @previous.setter
    def previous(self, previous):
        self._previous = previous

    @property
    def next(self):
        return self._next

    @next.setter
    def next(self, next):
        self._next = next

    @property
    def current(self):
        return self._current

    @current.setter
    def current(self, current):
        self._current = current

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaginationLinks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaginationLinks):
            return True

        return self.to_dict() != other.to_dict()


class ValidTimeIntervalApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'valid_from': 'str',
        'valid_until': 'str'
    }

    attribute_map = {
        'valid_from': 'validFrom',
        'valid_until': 'validUntil'
    }

    def __init__(self, valid_from=None, valid_until=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._valid_from = None
        self._valid_until = None
        self.discriminator = None

        self.valid_from = valid_from
        self.valid_until = valid_until

    @property
    def valid_from(self):
        """Gets the valid_from of this VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel.  # noqa: E501

        The start time of the interval when valid journey information is available, specified in RFC 3339 format.  # noqa: E501

        :return: The valid_from of this VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel.  # noqa: E501
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel.

        The start time of the interval when valid journey information is available, specified in RFC 3339 format.  # noqa: E501

        :param valid_from: The valid_from of this VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel.  # noqa: E501
        :type valid_from: str
        """

        self._valid_from = valid_from

    @property
    def valid_until(self):
        """Gets the valid_until of this VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel.  # noqa: E501

        The end time of the interval when valid journey information is available, specified in RFC 3339 format.  # noqa: E501

        :return: The valid_until of this VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel.  # noqa: E501
        :rtype: str
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel.

        The end time of the interval when valid journey information is available, specified in RFC 3339 format.  # noqa: E501

        :param valid_until: The valid_until of this VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel.  # noqa: E501
        :type valid_until: str
        """

        self._valid_until = valid_until

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidTimeIntervalApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ValidTimeIntervalApiModel):
            return True

        return self.to_dict() != other.to_dict()


class PositionsJourneyPositionApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'details_reference': 'str',
        'line': 'PositionsLineDetailsApiModel',
        'notes': 'list[CoreModelsNote]',
        'name': 'str',
        'direction': 'str',
        'latitude': 'float',
        'longitude': 'float'
    }

    attribute_map = {
        'details_reference': 'detailsReference',
        'line': 'line',
        'notes': 'notes',
        'name': 'name',
        'direction': 'direction',
        'latitude': 'latitude',
        'longitude': 'longitude'
    }

    def __init__(self, details_reference=None, line=None, notes=None, name=None, direction=None, latitude=None,
                 longitude=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._details_reference = None
        self._line = None
        self._notes = None
        self._name = None
        self._direction = None
        self._latitude = None
        self._longitude = None
        self.discriminator = None

        self.details_reference = details_reference
        if line is not None:
            self.line = line
        self.notes = notes
        self.name = name
        self.direction = direction
        self.latitude = latitude
        self.longitude = longitude

    @property
    def details_reference(self):
        """Gets the details_reference of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501

        Journey reference  # noqa: E501

        :return: The details_reference of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :rtype: str
        """
        return self._details_reference

    @details_reference.setter
    def details_reference(self, details_reference):
        """Sets the details_reference of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.

        Journey reference  # noqa: E501

        :param details_reference: The details_reference of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :type details_reference: str
        """

        self._details_reference = details_reference

    @property
    def line(self):
        """Gets the line of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501


        :return: The line of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :rtype: PositionsLineDetailsApiModel
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.


        :param line: The line of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :type line: PositionsLineDetailsApiModel
        """

        self._line = line

    @property
    def notes(self):
        """Gets the notes of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501

        Journey notes  # noqa: E501

        :return: The notes of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :rtype: list[VTApiPlaneraResaCoreModelsNote]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.

        Journey notes  # noqa: E501

        :param notes: The notes of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :type notes: list[VTApiPlaneraResaCoreModelsNote]
        """

        self._notes = notes

    @property
    def name(self):
        """Gets the name of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501

        Journey name  # noqa: E501

        :return: The name of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.

        Journey name  # noqa: E501

        :param name: The name of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def direction(self):
        """Gets the direction of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501

        Journey direction  # noqa: E501

        :return: The direction of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.

        Journey direction  # noqa: E501

        :param direction: The direction of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :type direction: str
        """

        self._direction = direction

    @property
    def latitude(self):
        """Gets the latitude of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501

        Current latitude of journey  # noqa: E501

        :return: The latitude of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.

        Current latitude of journey  # noqa: E501

        :param latitude: The latitude of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501

        Current longitude of journey  # noqa: E501

        :return: The longitude of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.

        Current longitude of journey  # noqa: E501

        :param longitude: The longitude of this VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.  # noqa: E501
        :type longitude: float
        """

        self._longitude = longitude

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionsJourneyPositionApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositionsJourneyPositionApiModel):
            return True

        return self.to_dict() != other.to_dict()


class PositionsLineDetailsApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'name': 'str',
        'background_color': 'str',
        'foreground_color': 'str',
        'border_color': 'str',
        'transport_mode': 'CoreModelsTransportMode',
        'transport_sub_mode': 'CoreModelsTransportSubMode'
    }

    attribute_map = {
        'name': 'name',
        'background_color': 'backgroundColor',
        'foreground_color': 'foregroundColor',
        'border_color': 'borderColor',
        'transport_mode': 'transportMode',
        'transport_sub_mode': 'transportSubMode'
    }

    def __init__(self, name=None, background_color=None, foreground_color=None, border_color=None, transport_mode=None,
                 transport_sub_mode=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._background_color = None
        self._foreground_color = None
        self._border_color = None
        self._transport_mode = None
        self._transport_sub_mode = None
        self.discriminator = None

        self.name = name
        self.background_color = background_color
        self.foreground_color = foreground_color
        self.border_color = border_color
        if transport_mode is not None:
            self.transport_mode = transport_mode
        if transport_sub_mode is not None:
            self.transport_sub_mode = transport_sub_mode

    @property
    def name(self):
        """Gets the name of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501

        The line name.  # noqa: E501

        :return: The name of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.

        The line name.  # noqa: E501

        :param name: The name of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def background_color(self):
        """Gets the background_color of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501

        The background color of the line symbol.  # noqa: E501

        :return: The background_color of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.

        The background color of the line symbol.  # noqa: E501

        :param background_color: The background_color of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def foreground_color(self):
        """Gets the foreground_color of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501

        The foreground color of the line symbol.  # noqa: E501

        :return: The foreground_color of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        """Sets the foreground_color of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.

        The foreground color of the line symbol.  # noqa: E501

        :param foreground_color: The foreground_color of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501
        :type foreground_color: str
        """

        self._foreground_color = foreground_color

    @property
    def border_color(self):
        """Gets the border_color of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501

        The border color of the line symbol.  # noqa: E501

        :return: The border_color of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._border_color

    @border_color.setter
    def border_color(self, border_color):
        """Sets the border_color of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.

        The border color of the line symbol.  # noqa: E501

        :param border_color: The border_color of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501
        :type border_color: str
        """

        self._border_color = border_color

    @property
    def transport_mode(self):
        """Gets the transport_mode of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501


        :return: The transport_mode of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaCoreModelsTransportMode
        """
        return self._transport_mode

    @transport_mode.setter
    def transport_mode(self, transport_mode):
        """Sets the transport_mode of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.


        :param transport_mode: The transport_mode of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501
        :type transport_mode: VTApiPlaneraResaCoreModelsTransportMode
        """

        self._transport_mode = transport_mode

    @property
    def transport_sub_mode(self):
        """Gets the transport_sub_mode of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501


        :return: The transport_sub_mode of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaCoreModelsTransportSubMode
        """
        return self._transport_sub_mode

    @transport_sub_mode.setter
    def transport_sub_mode(self, transport_sub_mode):
        """Sets the transport_sub_mode of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.


        :param transport_sub_mode: The transport_sub_mode of this VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.  # noqa: E501
        :type transport_sub_mode: VTApiPlaneraResaCoreModelsTransportSubMode
        """

        self._transport_sub_mode = transport_sub_mode

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionsLineDetailsApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositionsLineDetailsApiModel):
            return True

        return self.to_dict() != other.to_dict()


class DeparturesAndArrivalsGetDeparturesResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'results': 'list[DeparturesAndArrivalsDepartureApiModel]',
        'pagination': 'PaginationProperties',
        'links': 'PaginationLinks'
    }

    attribute_map = {
        'results': 'results',
        'pagination': 'pagination',
        'links': 'links'
    }

    def __init__(self, results=None, pagination=None, links=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._results = None
        self._pagination = None
        self._links = None
        self.discriminator = None

        self.results = results
        if pagination is not None:
            self.pagination = pagination
        if links is not None:
            self.links = links

    @property
    def results(self):
        """Gets the results of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse.  # noqa: E501

        The results.  # noqa: E501

        :return: The results of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse.  # noqa: E501
        :rtype: list[DeparturesAndArrivalsDepartureApiModel]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse.

        The results.  # noqa: E501

        :param results: The results of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse.  # noqa: E501
        :type results: list[DeparturesAndArrivalsDepartureApiModel]
        """

        self._results = results

    @property
    def pagination(self):
        """Gets the pagination of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse.  # noqa: E501


        :return: The pagination of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsPaginationProperties
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse.


        :param pagination: The pagination of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse.  # noqa: E501
        :type pagination: VTApiPlaneraResaWebV4ModelsPaginationProperties
        """

        self._pagination = pagination

    @property
    def links(self):
        """Gets the links of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse.  # noqa: E501


        :return: The links of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsPaginationLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse.


        :param links: The links of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse.  # noqa: E501
        :type links: VTApiPlaneraResaWebV4ModelsPaginationLinks
        """

        self._links = links

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeparturesAndArrivalsGetDeparturesResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeparturesAndArrivalsGetDeparturesResponse):
            return True

        return self.to_dict() != other.to_dict()


class DeparturesAndArrivalsDepartureApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'details_reference': 'str',
        'service_journey': 'DeparturesAndArrivalsServiceJourneyApiModel',
        'stop_point': 'DeparturesAndArrivalsStopPointApiModel',
        'planned_time': 'str',
        'estimated_time': 'str',
        'estimated_otherwise_planned_time': 'str',
        'is_cancelled': 'bool',
        'is_part_cancelled': 'bool',
        'occupancy': 'OccupancyInformationApiModel'
    }

    attribute_map = {
        'details_reference': 'detailsReference',
        'service_journey': 'serviceJourney',
        'stop_point': 'stopPoint',
        'planned_time': 'plannedTime',
        'estimated_time': 'estimatedTime',
        'estimated_otherwise_planned_time': 'estimatedOtherwisePlannedTime',
        'is_cancelled': 'isCancelled',
        'is_part_cancelled': 'isPartCancelled',
        'occupancy': 'occupancy'
    }

    def __init__(self, details_reference=None, service_journey=None, stop_point=None, planned_time=None,
                 estimated_time=None, estimated_otherwise_planned_time=None, is_cancelled=None, is_part_cancelled=None,
                 occupancy=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._details_reference = None
        self._service_journey = None
        self._stop_point = None
        self._planned_time = None
        self._estimated_time = None
        self._estimated_otherwise_planned_time = None
        self._is_cancelled = None
        self._is_part_cancelled = None
        self._occupancy = None
        self.discriminator = None

        self.details_reference = details_reference
        if service_journey is not None:
            self.service_journey = service_journey
        self.stop_point = stop_point
        self.planned_time = planned_time
        self.estimated_time = estimated_time
        self.estimated_otherwise_planned_time = estimated_otherwise_planned_time
        if is_cancelled is not None:
            self.is_cancelled = is_cancelled
        if is_part_cancelled is not None:
            self.is_part_cancelled = is_part_cancelled
        if occupancy is not None:
            self.occupancy = occupancy

    @property
    def details_reference(self):
        """Gets the details_reference of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501

        A reference that should be used when getting detailed information about the journey.  # noqa: E501

        :return: The details_reference of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :rtype: str
        """
        return self._details_reference

    @details_reference.setter
    def details_reference(self, details_reference):
        """Sets the details_reference of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.

        A reference that should be used when getting detailed information about the journey.  # noqa: E501

        :param details_reference: The details_reference of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :type details_reference: str
        """

        self._details_reference = details_reference

    @property
    def service_journey(self):
        """Gets the service_journey of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501


        :return: The service_journey of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :rtype: DeparturesAndArrivalsServiceJourneyApiModel
        """
        return self._service_journey

    @service_journey.setter
    def service_journey(self, service_journey):
        """Sets the service_journey of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.


        :param service_journey: The service_journey of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :type service_journey: DeparturesAndArrivalsServiceJourneyApiModel
        """

        self._service_journey = service_journey

    @property
    def stop_point(self):
        """Gets the stop_point of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501


        :return: The stop_point of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :rtype: DeparturesAndArrivalsStopPointApiModel
        """
        return self._stop_point

    @stop_point.setter
    def stop_point(self, stop_point):
        """Sets the stop_point of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.


        :param stop_point: The stop_point of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :type stop_point: DeparturesAndArrivalsStopPointApiModel
        """
        if self.local_vars_configuration.client_side_validation and stop_point is None:  # noqa: E501
            raise ValueError("Invalid value for `stop_point`, must not be `None`")  # noqa: E501

        self._stop_point = stop_point

    @property
    def planned_time(self):
        """Gets the planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501

        The planned time of the call in RFC 3339 format.  # noqa: E501

        :return: The planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :rtype: str
        """
        return self._planned_time

    @planned_time.setter
    def planned_time(self, planned_time):
        """Sets the planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.

        The planned time of the call in RFC 3339 format.  # noqa: E501

        :param planned_time: The planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :type planned_time: str
        """
        if self.local_vars_configuration.client_side_validation and planned_time is None:  # noqa: E501
            raise ValueError("Invalid value for `planned_time`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                planned_time is not None and len(planned_time) < 1):
            raise ValueError(
                "Invalid value for `planned_time`, length must be greater than or equal to `1`")  # noqa: E501

        self._planned_time = planned_time

    @property
    def estimated_time(self):
        """Gets the estimated_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501

        The estimated time of the call in RFC 3339 format.  # noqa: E501

        :return: The estimated_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_time

    @estimated_time.setter
    def estimated_time(self, estimated_time):
        """Sets the estimated_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.

        The estimated time of the call in RFC 3339 format.  # noqa: E501

        :param estimated_time: The estimated_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :type estimated_time: str
        """

        self._estimated_time = estimated_time

    @property
    def estimated_otherwise_planned_time(self):
        """Gets the estimated_otherwise_planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501

        The best known time of the call in RFC 3339 format. Is EstimatedTime if exists, otherwise PlannedTime.  # noqa: E501

        :return: The estimated_otherwise_planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_otherwise_planned_time

    @estimated_otherwise_planned_time.setter
    def estimated_otherwise_planned_time(self, estimated_otherwise_planned_time):
        """Sets the estimated_otherwise_planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.

        The best known time of the call in RFC 3339 format. Is EstimatedTime if exists, otherwise PlannedTime.  # noqa: E501

        :param estimated_otherwise_planned_time: The estimated_otherwise_planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :type estimated_otherwise_planned_time: str
        """

        self._estimated_otherwise_planned_time = estimated_otherwise_planned_time

    @property
    def is_cancelled(self):
        """Gets the is_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501

        Flag indicating if the departure or arrival is cancelled.  # noqa: E501

        :return: The is_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        """Sets the is_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.

        Flag indicating if the departure or arrival is cancelled.  # noqa: E501

        :param is_cancelled: The is_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :type is_cancelled: bool
        """

        self._is_cancelled = is_cancelled

    @property
    def is_part_cancelled(self):
        """Gets the is_part_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501

        Flag indicating if the departure or arrival is partially cancelled.  # noqa: E501

        :return: The is_part_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_part_cancelled

    @is_part_cancelled.setter
    def is_part_cancelled(self, is_part_cancelled):
        """Sets the is_part_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.

        Flag indicating if the departure or arrival is partially cancelled.  # noqa: E501

        :param is_part_cancelled: The is_part_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :type is_part_cancelled: bool
        """

        self._is_part_cancelled = is_part_cancelled

    @property
    def occupancy(self):
        """Gets the occupancy of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501


        :return: The occupancy of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.


        :param occupancy: The occupancy of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.  # noqa: E501
        :type occupancy: VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel
        """

        self._occupancy = occupancy

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeparturesAndArrivalsDepartureApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeparturesAndArrivalsDepartureApiModel):
            return True

        return self.to_dict() != other.to_dict()


class DeparturesAndArrivalsServiceJourneyApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'gid': 'str',
        'origin': 'str',
        'direction': 'str',
        'line': 'DeparturesAndArrivalsLineApiModel'
    }

    attribute_map = {
        'gid': 'gid',
        'origin': 'origin',
        'direction': 'direction',
        'line': 'line'
    }

    def __init__(self, gid=None, origin=None, direction=None, line=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._origin = None
        self._direction = None
        self._line = None
        self.discriminator = None

        self.gid = gid
        self.origin = origin
        self.direction = direction
        if line is not None:
            self.line = line

    @property
    def gid(self):
        """Gets the gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.  # noqa: E501

        16-digit Västtrafik service journey gid.  # noqa: E501

        :return: The gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.

        16-digit Västtrafik service journey gid.  # noqa: E501

        :param gid: The gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.  # noqa: E501
        :type gid: str
        """
        if self.local_vars_configuration.client_side_validation and gid is None:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                gid is not None and len(gid) < 1):
            raise ValueError("Invalid value for `gid`, length must be greater than or equal to `1`")  # noqa: E501

        self._gid = gid

    @property
    def origin(self):
        """Gets the origin of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.  # noqa: E501

        A description of the origin.  # noqa: E501

        :return: The origin of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.

        A description of the origin.  # noqa: E501

        :param origin: The origin of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.  # noqa: E501
        :type origin: str
        """

        self._origin = origin

    @property
    def direction(self):
        """Gets the direction of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.  # noqa: E501

        A description of the direction.  # noqa: E501

        :return: The direction of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.

        A description of the direction.  # noqa: E501

        :param direction: The direction of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.  # noqa: E501
        :type direction: str
        """

        self._direction = direction

    @property
    def line(self):
        """Gets the line of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.  # noqa: E501


        :return: The line of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.  # noqa: E501
        :rtype: DeparturesAndArrivalsLineApiModel
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.


        :param line: The line of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.  # noqa: E501
        :type line: DeparturesAndArrivalsLineApiModel
        """

        self._line = line

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeparturesAndArrivalsServiceJourneyApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeparturesAndArrivalsServiceJourneyApiModel):
            return True

        return self.to_dict() != other.to_dict()


class DeparturesAndArrivalsLineApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'gid': 'str',
        'name': 'str',
        'short_name': 'str',
        'designation': 'str',
        'background_color': 'str',
        'foreground_color': 'str',
        'border_color': 'str',
        'transport_mode': 'CoreModelsTransportMode',
        'transport_sub_mode': 'CoreModelsTransportSubMode',
        'is_wheelchair_accessible': 'bool'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'short_name': 'shortName',
        'designation': 'designation',
        'background_color': 'backgroundColor',
        'foreground_color': 'foregroundColor',
        'border_color': 'borderColor',
        'transport_mode': 'transportMode',
        'transport_sub_mode': 'transportSubMode',
        'is_wheelchair_accessible': 'isWheelchairAccessible'
    }

    def __init__(self, gid=None, name=None, short_name=None, designation=None, background_color=None,
                 foreground_color=None, border_color=None, transport_mode=None, transport_sub_mode=None,
                 is_wheelchair_accessible=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._short_name = None
        self._designation = None
        self._background_color = None
        self._foreground_color = None
        self._border_color = None
        self._transport_mode = None
        self._transport_sub_mode = None
        self._is_wheelchair_accessible = None
        self.discriminator = None

        self.gid = gid
        self.name = name
        self.short_name = short_name
        self.designation = designation
        self.background_color = background_color
        self.foreground_color = foreground_color
        self.border_color = border_color
        if transport_mode is not None:
            self.transport_mode = transport_mode
        if transport_sub_mode is not None:
            self.transport_sub_mode = transport_sub_mode
        if is_wheelchair_accessible is not None:
            self.is_wheelchair_accessible = is_wheelchair_accessible

    @property
    def gid(self):
        """Gets the gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501

        16-digit Västtrafik line gid.  # noqa: E501

        :return: The gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.

        16-digit Västtrafik line gid.  # noqa: E501

        :param gid: The gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :type gid: str
        """

        self._gid = gid

    @property
    def name(self):
        """Gets the name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501

        The line name.  # noqa: E501

        :return: The name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.

        The line name.  # noqa: E501

        :param name: The name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def short_name(self):
        """Gets the short_name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501

        The short name of the line, usually 5 characters or less.  # noqa: E501

        :return: The short_name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.

        The short name of the line, usually 5 characters or less.  # noqa: E501

        :param short_name: The short_name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def designation(self):
        """Gets the designation of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501

        The designation of the line.  # noqa: E501

        :return: The designation of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.

        The designation of the line.  # noqa: E501

        :param designation: The designation of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :type designation: str
        """

        self._designation = designation

    @property
    def background_color(self):
        """Gets the background_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501

        The background color of the line symbol.  # noqa: E501

        :return: The background_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.

        The background color of the line symbol.  # noqa: E501

        :param background_color: The background_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def foreground_color(self):
        """Gets the foreground_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501

        The foreground color of the line symbol.  # noqa: E501

        :return: The foreground_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        """Sets the foreground_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.

        The foreground color of the line symbol.  # noqa: E501

        :param foreground_color: The foreground_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :type foreground_color: str
        """

        self._foreground_color = foreground_color

    @property
    def border_color(self):
        """Gets the border_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501

        The border color of the line symbol.  # noqa: E501

        :return: The border_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._border_color

    @border_color.setter
    def border_color(self, border_color):
        """Sets the border_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.

        The border color of the line symbol.  # noqa: E501

        :param border_color: The border_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :type border_color: str
        """

        self._border_color = border_color

    @property
    def transport_mode(self):
        """Gets the transport_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501


        :return: The transport_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaCoreModelsTransportMode
        """
        return self._transport_mode

    @transport_mode.setter
    def transport_mode(self, transport_mode):
        """Sets the transport_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.


        :param transport_mode: The transport_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :type transport_mode: VTApiPlaneraResaCoreModelsTransportMode
        """

        self._transport_mode = transport_mode

    @property
    def transport_sub_mode(self):
        """Gets the transport_sub_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501


        :return: The transport_sub_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaCoreModelsTransportSubMode
        """
        return self._transport_sub_mode

    @transport_sub_mode.setter
    def transport_sub_mode(self, transport_sub_mode):
        """Sets the transport_sub_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.


        :param transport_sub_mode: The transport_sub_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :type transport_sub_mode: VTApiPlaneraResaCoreModelsTransportSubMode
        """

        self._transport_sub_mode = transport_sub_mode

    @property
    def is_wheelchair_accessible(self):
        """Gets the is_wheelchair_accessible of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501

        Flag indicating if the line is wheelchair accessible.  # noqa: E501

        :return: The is_wheelchair_accessible of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_wheelchair_accessible

    @is_wheelchair_accessible.setter
    def is_wheelchair_accessible(self, is_wheelchair_accessible):
        """Sets the is_wheelchair_accessible of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.

        Flag indicating if the line is wheelchair accessible.  # noqa: E501

        :param is_wheelchair_accessible: The is_wheelchair_accessible of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.  # noqa: E501
        :type is_wheelchair_accessible: bool
        """

        self._is_wheelchair_accessible = is_wheelchair_accessible

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeparturesAndArrivalsLineApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeparturesAndArrivalsLineApiModel):
            return True

        return self.to_dict() != other.to_dict()


class DeparturesAndArrivalsStopPointApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'gid': 'str',
        'name': 'str',
        'platform': 'str',
        'latitude': 'float',
        'longitude': 'float'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'platform': 'platform',
        'latitude': 'latitude',
        'longitude': 'longitude'
    }

    def __init__(self, gid=None, name=None, platform=None, latitude=None, longitude=None,
                 local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._platform = None
        self._latitude = None
        self._longitude = None
        self.discriminator = None

        self.gid = gid
        self.name = name
        self.platform = platform
        self.latitude = latitude
        self.longitude = longitude

    @property
    def gid(self):
        """Gets the gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501

        The 16-digit Västtrafik gid of the stop point.  # noqa: E501

        :return: The gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.

        The 16-digit Västtrafik gid of the stop point.  # noqa: E501

        :param gid: The gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501
        :type gid: str
        """
        if self.local_vars_configuration.client_side_validation and gid is None:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                gid is not None and len(gid) < 1):
            raise ValueError("Invalid value for `gid`, length must be greater than or equal to `1`")  # noqa: E501

        self._gid = gid

    @property
    def name(self):
        """Gets the name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501

        The stop point name.  # noqa: E501

        :return: The name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.

        The stop point name.  # noqa: E501

        :param name: The name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501

        The platform of the stop point.  # noqa: E501

        :return: The platform of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.

        The platform of the stop point.  # noqa: E501

        :param platform: The platform of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501
        :type platform: str
        """

        self._platform = platform

    @property
    def latitude(self):
        """Gets the latitude of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501

        The latitude coordinate of the stop point  # noqa: E501

        :return: The latitude of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.

        The latitude coordinate of the stop point  # noqa: E501

        :param latitude: The latitude of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501

        The logitude coordinate of the stop point  # noqa: E501

        :return: The longitude of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.

        The logitude coordinate of the stop point  # noqa: E501

        :param longitude: The longitude of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.  # noqa: E501
        :type longitude: float
        """

        self._longitude = longitude

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeparturesAndArrivalsStopPointApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeparturesAndArrivalsStopPointApiModel):
            return True

        return self.to_dict() != other.to_dict()


class DeparturesAndArrivalsGetArrivalsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'results': 'list[DeparturesAndArrivalsArrivalApiModel]',
        'pagination': 'PaginationProperties',
        'links': 'PaginationLinks'
    }

    attribute_map = {
        'results': 'results',
        'pagination': 'pagination',
        'links': 'links'
    }

    def __init__(self, results=None, pagination=None, links=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._results = None
        self._pagination = None
        self._links = None
        self.discriminator = None

        self.results = results
        if pagination is not None:
            self.pagination = pagination
        if links is not None:
            self.links = links

    @property
    def results(self):
        """Gets the results of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse.  # noqa: E501

        The results.  # noqa: E501

        :return: The results of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse.  # noqa: E501
        :rtype: list[DeparturesAndArrivalsArrivalApiModel]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse.

        The results.  # noqa: E501

        :param results: The results of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse.  # noqa: E501
        :type results: list[DeparturesAndArrivalsArrivalApiModel]
        """

        self._results = results

    @property
    def pagination(self):
        """Gets the pagination of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse.  # noqa: E501


        :return: The pagination of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsPaginationProperties
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse.


        :param pagination: The pagination of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse.  # noqa: E501
        :type pagination: VTApiPlaneraResaWebV4ModelsPaginationProperties
        """

        self._pagination = pagination

    @property
    def links(self):
        """Gets the links of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse.  # noqa: E501


        :return: The links of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsPaginationLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse.


        :param links: The links of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse.  # noqa: E501
        :type links: VTApiPlaneraResaWebV4ModelsPaginationLinks
        """

        self._links = links

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeparturesAndArrivalsGetArrivalsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeparturesAndArrivalsGetArrivalsResponse):
            return True

        return self.to_dict() != other.to_dict()


class DeparturesAndArrivalsArrivalApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'details_reference': 'str',
        'service_journey': 'DeparturesAndArrivalsServiceJourneyApiModel',
        'stop_point': 'DeparturesAndArrivalsStopPointApiModel',
        'planned_time': 'str',
        'estimated_time': 'str',
        'estimated_otherwise_planned_time': 'str',
        'is_cancelled': 'bool',
        'is_part_cancelled': 'bool'
    }

    attribute_map = {
        'details_reference': 'detailsReference',
        'service_journey': 'serviceJourney',
        'stop_point': 'stopPoint',
        'planned_time': 'plannedTime',
        'estimated_time': 'estimatedTime',
        'estimated_otherwise_planned_time': 'estimatedOtherwisePlannedTime',
        'is_cancelled': 'isCancelled',
        'is_part_cancelled': 'isPartCancelled'
    }

    def __init__(self, details_reference=None, service_journey=None, stop_point=None, planned_time=None,
                 estimated_time=None, estimated_otherwise_planned_time=None, is_cancelled=None, is_part_cancelled=None,
                 local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._details_reference = None
        self._service_journey = None
        self._stop_point = None
        self._planned_time = None
        self._estimated_time = None
        self._estimated_otherwise_planned_time = None
        self._is_cancelled = None
        self._is_part_cancelled = None
        self.discriminator = None

        self.details_reference = details_reference
        if service_journey is not None:
            self.service_journey = service_journey
        self.stop_point = stop_point
        self.planned_time = planned_time
        self.estimated_time = estimated_time
        self.estimated_otherwise_planned_time = estimated_otherwise_planned_time
        if is_cancelled is not None:
            self.is_cancelled = is_cancelled
        if is_part_cancelled is not None:
            self.is_part_cancelled = is_part_cancelled

    @property
    def details_reference(self):
        """Gets the details_reference of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501

        A reference that should be used when getting detailed information about the journey.  # noqa: E501

        :return: The details_reference of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :rtype: str
        """
        return self._details_reference

    @details_reference.setter
    def details_reference(self, details_reference):
        """Sets the details_reference of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.

        A reference that should be used when getting detailed information about the journey.  # noqa: E501

        :param details_reference: The details_reference of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :type details_reference: str
        """

        self._details_reference = details_reference

    @property
    def service_journey(self):
        """Gets the service_journey of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501


        :return: The service_journey of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel
        """
        return self._service_journey

    @service_journey.setter
    def service_journey(self, service_journey):
        """Sets the service_journey of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.


        :param service_journey: The service_journey of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :type service_journey: VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel
        """

        self._service_journey = service_journey

    @property
    def stop_point(self):
        """Gets the stop_point of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501


        :return: The stop_point of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel
        """
        return self._stop_point

    @stop_point.setter
    def stop_point(self, stop_point):
        """Sets the stop_point of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.


        :param stop_point: The stop_point of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :type stop_point: VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel
        """
        if self.local_vars_configuration.client_side_validation and stop_point is None:  # noqa: E501
            raise ValueError("Invalid value for `stop_point`, must not be `None`")  # noqa: E501

        self._stop_point = stop_point

    @property
    def planned_time(self):
        """Gets the planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501

        The planned time of the call in RFC 3339 format.  # noqa: E501

        :return: The planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :rtype: str
        """
        return self._planned_time

    @planned_time.setter
    def planned_time(self, planned_time):
        """Sets the planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.

        The planned time of the call in RFC 3339 format.  # noqa: E501

        :param planned_time: The planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :type planned_time: str
        """
        if self.local_vars_configuration.client_side_validation and planned_time is None:  # noqa: E501
            raise ValueError("Invalid value for `planned_time`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                planned_time is not None and len(planned_time) < 1):
            raise ValueError(
                "Invalid value for `planned_time`, length must be greater than or equal to `1`")  # noqa: E501

        self._planned_time = planned_time

    @property
    def estimated_time(self):
        """Gets the estimated_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501

        The estimated time of the call in RFC 3339 format.  # noqa: E501

        :return: The estimated_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_time

    @estimated_time.setter
    def estimated_time(self, estimated_time):
        """Sets the estimated_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.

        The estimated time of the call in RFC 3339 format.  # noqa: E501

        :param estimated_time: The estimated_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :type estimated_time: str
        """

        self._estimated_time = estimated_time

    @property
    def estimated_otherwise_planned_time(self):
        """Gets the estimated_otherwise_planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501

        The best known time of the call in RFC 3339 format. Is EstimatedTime if exists, otherwise PlannedTime.  # noqa: E501

        :return: The estimated_otherwise_planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :rtype: str
        """
        return self._estimated_otherwise_planned_time

    @estimated_otherwise_planned_time.setter
    def estimated_otherwise_planned_time(self, estimated_otherwise_planned_time):
        """Sets the estimated_otherwise_planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.

        The best known time of the call in RFC 3339 format. Is EstimatedTime if exists, otherwise PlannedTime.  # noqa: E501

        :param estimated_otherwise_planned_time: The estimated_otherwise_planned_time of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :type estimated_otherwise_planned_time: str
        """

        self._estimated_otherwise_planned_time = estimated_otherwise_planned_time

    @property
    def is_cancelled(self):
        """Gets the is_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501

        Flag indicating if the departure or arrival is cancelled.  # noqa: E501

        :return: The is_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled):
        """Sets the is_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.

        Flag indicating if the departure or arrival is cancelled.  # noqa: E501

        :param is_cancelled: The is_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :type is_cancelled: bool
        """

        self._is_cancelled = is_cancelled

    @property
    def is_part_cancelled(self):
        """Gets the is_part_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501

        Flag indicating if the departure or arrival is partially cancelled.  # noqa: E501

        :return: The is_part_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_part_cancelled

    @is_part_cancelled.setter
    def is_part_cancelled(self, is_part_cancelled):
        """Sets the is_part_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.

        Flag indicating if the departure or arrival is partially cancelled.  # noqa: E501

        :param is_part_cancelled: The is_part_cancelled of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalApiModel.  # noqa: E501
        :type is_part_cancelled: bool
        """

        self._is_part_cancelled = is_part_cancelled

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeparturesAndArrivalsArrivalApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeparturesAndArrivalsArrivalApiModel):
            return True

        return self.to_dict() != other.to_dict()


class DeparturesAndArrivalsDepartureDetailsApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'service_journeys': 'list[DeparturesAndArrivalsServiceJourneyDetailsApiModel]',
        'occupancy': 'OccupancyInformationApiModel'
    }

    attribute_map = {
        'service_journeys': 'serviceJourneys',
        'occupancy': 'occupancy'
    }

    def __init__(self, service_journeys=None, occupancy=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._service_journeys = None
        self._occupancy = None
        self.discriminator = None

        self.service_journeys = service_journeys
        if occupancy is not None:
            self.occupancy = occupancy

    @property
    def service_journeys(self):
        """Gets the service_journeys of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel.  # noqa: E501


        :return: The service_journeys of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel.  # noqa: E501
        :rtype: list[DeparturesAndArrivalsServiceJourneyDetailsApiModel]
        """
        return self._service_journeys

    @service_journeys.setter
    def service_journeys(self, service_journeys):
        """Sets the service_journeys of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel.


        :param service_journeys: The service_journeys of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel.  # noqa: E501
        :type service_journeys: list[DeparturesAndArrivalsServiceJourneyDetailsApiModel]
        """

        self._service_journeys = service_journeys

    @property
    def occupancy(self):
        """Gets the occupancy of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel.  # noqa: E501


        :return: The occupancy of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel.


        :param occupancy: The occupancy of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel.  # noqa: E501
        :type occupancy: VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel
        """

        self._occupancy = occupancy

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeparturesAndArrivalsDepartureDetailsApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeparturesAndArrivalsDepartureDetailsApiModel):
            return True

        return self.to_dict() != other.to_dict()


class DeparturesAndArrivalsServiceJourneyDetailsApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'gid': 'str',
        'direction': 'str',
        'line': 'DeparturesAndArrivalsLineDetailsApiModel',
        'service_journey_coordinates': 'list[DeparturesAndArrivalsCoordinateApiModel]',
        'calls_on_service_journey': 'list[DeparturesAndArrivalsCallDetailsApiModel]'
    }

    attribute_map = {
        'gid': 'gid',
        'direction': 'direction',
        'line': 'line',
        'service_journey_coordinates': 'serviceJourneyCoordinates',
        'calls_on_service_journey': 'callsOnServiceJourney'
    }

    def __init__(self, gid=None, direction=None, line=None, service_journey_coordinates=None,
                 calls_on_service_journey=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._direction = None
        self._line = None
        self._service_journey_coordinates = None
        self._calls_on_service_journey = None
        self.discriminator = None

        self.gid = gid
        self.direction = direction
        if line is not None:
            self.line = line
        self.service_journey_coordinates = service_journey_coordinates
        self.calls_on_service_journey = calls_on_service_journey

    @property
    def gid(self):
        """Gets the gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501

        16-digit Västtrafik service journey gid.  # noqa: E501

        :return: The gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.

        16-digit Västtrafik service journey gid.  # noqa: E501

        :param gid: The gid of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501
        :type gid: str
        """

        self._gid = gid

    @property
    def direction(self):
        """Gets the direction of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501

        A description of the direction.  # noqa: E501

        :return: The direction of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.

        A description of the direction.  # noqa: E501

        :param direction: The direction of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501
        :type direction: str
        """

        self._direction = direction

    @property
    def line(self):
        """Gets the line of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501


        :return: The line of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501
        :rtype: DeparturesAndArrivalsLineDetailsApiModel
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.


        :param line: The line of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501
        :type line: DeparturesAndArrivalsLineDetailsApiModel
        """

        self._line = line

    @property
    def service_journey_coordinates(self):
        """Gets the service_journey_coordinates of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501

        The coordinates of the service journey.  # noqa: E501

        :return: The service_journey_coordinates of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501
        :rtype: list[VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsCoordinateApiModel]
        """
        return self._service_journey_coordinates

    @service_journey_coordinates.setter
    def service_journey_coordinates(self, service_journey_coordinates):
        """Sets the service_journey_coordinates of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.

        The coordinates of the service journey.  # noqa: E501

        :param service_journey_coordinates: The service_journey_coordinates of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501
        :type service_journey_coordinates: list[VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsCoordinateApiModel]
        """

        self._service_journey_coordinates = service_journey_coordinates

    @property
    def calls_on_service_journey(self):
        """Gets the calls_on_service_journey of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501

        All calls on the service journey.  # noqa: E501

        :return: The calls_on_service_journey of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501
        :rtype: list[VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsCallDetailsApiModel]
        """
        return self._calls_on_service_journey

    @calls_on_service_journey.setter
    def calls_on_service_journey(self, calls_on_service_journey):
        """Sets the calls_on_service_journey of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.

        All calls on the service journey.  # noqa: E501

        :param calls_on_service_journey: The calls_on_service_journey of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyDetailsApiModel.  # noqa: E501
        :type calls_on_service_journey: list[VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsCallDetailsApiModel]
        """

        self._calls_on_service_journey = calls_on_service_journey

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeparturesAndArrivalsServiceJourneyDetailsApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeparturesAndArrivalsServiceJourneyDetailsApiModel):
            return True

        return self.to_dict() != other.to_dict()


class DeparturesAndArrivalsLineDetailsApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'name': 'str',
        'background_color': 'str',
        'foreground_color': 'str',
        'border_color': 'str',
        'transport_mode': 'CoreModelsTransportMode',
        'transport_sub_mode': 'CoreModelsTransportSubMode'
    }

    attribute_map = {
        'name': 'name',
        'background_color': 'backgroundColor',
        'foreground_color': 'foregroundColor',
        'border_color': 'borderColor',
        'transport_mode': 'transportMode',
        'transport_sub_mode': 'transportSubMode'
    }

    def __init__(self, name=None, background_color=None, foreground_color=None, border_color=None, transport_mode=None,
                 transport_sub_mode=None, local_vars_configuration=None):  # noqa: E501
        """VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._background_color = None
        self._foreground_color = None
        self._border_color = None
        self._transport_mode = None
        self._transport_sub_mode = None
        self.discriminator = None

        self.name = name
        self.background_color = background_color
        self.foreground_color = foreground_color
        self.border_color = border_color
        if transport_mode is not None:
            self.transport_mode = transport_mode
        if transport_sub_mode is not None:
            self.transport_sub_mode = transport_sub_mode

    @property
    def name(self):
        """Gets the name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501

        The line name.  # noqa: E501

        :return: The name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.

        The line name.  # noqa: E501

        :param name: The name of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def background_color(self):
        """Gets the background_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501

        The background color of the line symbol.  # noqa: E501

        :return: The background_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.

        The background color of the line symbol.  # noqa: E501

        :param background_color: The background_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def foreground_color(self):
        """Gets the foreground_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501

        The foreground color of the line symbol.  # noqa: E501

        :return: The foreground_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        """Sets the foreground_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.

        The foreground color of the line symbol.  # noqa: E501

        :param foreground_color: The foreground_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501
        :type foreground_color: str
        """

        self._foreground_color = foreground_color

    @property
    def border_color(self):
        """Gets the border_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501

        The border color of the line symbol.  # noqa: E501

        :return: The border_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501
        :rtype: str
        """
        return self._border_color

    @border_color.setter
    def border_color(self, border_color):
        """Sets the border_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.

        The border color of the line symbol.  # noqa: E501

        :param border_color: The border_color of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501
        :type border_color: str
        """

        self._border_color = border_color

    @property
    def transport_mode(self):
        """Gets the transport_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501


        :return: The transport_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaCoreModelsTransportMode
        """
        return self._transport_mode

    @transport_mode.setter
    def transport_mode(self, transport_mode):
        """Sets the transport_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.


        :param transport_mode: The transport_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501
        :type transport_mode: VTApiPlaneraResaCoreModelsTransportMode
        """

        self._transport_mode = transport_mode

    @property
    def transport_sub_mode(self):
        """Gets the transport_sub_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501


        :return: The transport_sub_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501
        :rtype: VTApiPlaneraResaCoreModelsTransportSubMode
        """
        return self._transport_sub_mode

    @transport_sub_mode.setter
    def transport_sub_mode(self, transport_sub_mode):
        """Sets the transport_sub_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.


        :param transport_sub_mode: The transport_sub_mode of this VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineDetailsApiModel.  # noqa: E501
        :type transport_sub_mode: VTApiPlaneraResaCoreModelsTransportSubMode
        """

        self._transport_sub_mode = transport_sub_mode

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeparturesAndArrivalsLineDetailsApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeparturesAndArrivalsLineDetailsApiModel):
            return True

        return self.to_dict() != other.to_dict()


class TrafficSituationApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'situation_number': 'str',
        'creation_time': 'datetime',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'severity': 'str',
        'title': 'str',
        'description': 'str',
        'affected_stop_points': 'list[StopPointApiModel]',
        'affected_lines': 'list[LineApiModel]',
        'affected_journeys': 'list[JourneyApiModel]'
    }

    attribute_map = {
        'situation_number': 'situationNumber',
        'creation_time': 'creationTime',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'severity': 'severity',
        'title': 'title',
        'description': 'description',
        'affected_stop_points': 'affectedStopPoints',
        'affected_lines': 'affectedLines',
        'affected_journeys': 'affectedJourneys'
    }

    def __init__(self, situation_number=None, creation_time=None, start_time=None, end_time=None, severity=None,
                 title=None, description=None, affected_stop_points=None, affected_lines=None, affected_journeys=None,
                 local_vars_configuration=None):  # noqa: E501
        """TrafficSituationApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._situation_number = None
        self._creation_time = None
        self._start_time = None
        self._end_time = None
        self._severity = None
        self._title = None
        self._description = None
        self._affected_stop_points = None
        self._affected_lines = None
        self._affected_journeys = None
        self.discriminator = None

        self.situation_number = situation_number
        if creation_time is not None:
            self.creation_time = creation_time
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if severity is not None:
            self.severity = severity
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        self.affected_stop_points = affected_stop_points
        self.affected_lines = affected_lines
        self.affected_journeys = affected_journeys

    @property
    def situation_number(self):
        """Gets the situation_number of this TrafficSituationApiModel.  # noqa: E501

        Example data: \"2001186014\"  # noqa: E501

        :return: The situation_number of this TrafficSituationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._situation_number

    @situation_number.setter
    def situation_number(self, situation_number):
        """Sets the situation_number of this TrafficSituationApiModel.

        Example data: \"2001186014\"  # noqa: E501

        :param situation_number: The situation_number of this TrafficSituationApiModel.  # noqa: E501
        :type situation_number: str
        """
        if self.local_vars_configuration.client_side_validation and situation_number is None:  # noqa: E501
            raise ValueError("Invalid value for `situation_number`, must not be `None`")  # noqa: E501

        self._situation_number = situation_number

    @property
    def creation_time(self):
        """Gets the creation_time of this TrafficSituationApiModel.  # noqa: E501

        Time when traffic situation is created/updated.  Example data: \"2018-01-03T10:31:42.108+01:00\"  # noqa: E501

        :return: The creation_time of this TrafficSituationApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this TrafficSituationApiModel.

        Time when traffic situation is created/updated.  Example data: \"2018-01-03T10:31:42.108+01:00\"  # noqa: E501

        :param creation_time: The creation_time of this TrafficSituationApiModel.  # noqa: E501
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def start_time(self):
        """Gets the start_time of this TrafficSituationApiModel.  # noqa: E501

        Time from when the traffic situation is valid.  Example data: \"2018-01-03T10:31:42.108+01:00\"  # noqa: E501

        :return: The start_time of this TrafficSituationApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TrafficSituationApiModel.

        Time from when the traffic situation is valid.  Example data: \"2018-01-03T10:31:42.108+01:00\"  # noqa: E501

        :param start_time: The start_time of this TrafficSituationApiModel.  # noqa: E501
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this TrafficSituationApiModel.  # noqa: E501

        End time for when traffic sitation ends.  Example data: \"2018-01-04T10:31:42.108+01:00\"  # noqa: E501

        :return: The end_time of this TrafficSituationApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TrafficSituationApiModel.

        End time for when traffic sitation ends.  Example data: \"2018-01-04T10:31:42.108+01:00\"  # noqa: E501

        :param end_time: The end_time of this TrafficSituationApiModel.  # noqa: E501
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def severity(self):
        """Gets the severity of this TrafficSituationApiModel.  # noqa: E501

        Describes the severity of the traffic situation. Possible values are \"severe\", \"normal\" and \"slight\". Traffic situations with \"slight\" severity should be considered if they should be shown. Example data: \"severe\"  # noqa: E501

        :return: The severity of this TrafficSituationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this TrafficSituationApiModel.

        Describes the severity of the traffic situation. Possible values are \"severe\", \"normal\" and \"slight\". Traffic situations with \"slight\" severity should be considered if they should be shown. Example data: \"severe\"  # noqa: E501

        :param severity: The severity of this TrafficSituationApiModel.  # noqa: E501
        :type severity: str
        """

        self._severity = severity

    @property
    def title(self):
        """Gets the title of this TrafficSituationApiModel.  # noqa: E501

        Example data: \"Linje X, hÃ¥llplats HPL Ã¤r tillfÃ¤lligt indragen mot DEST/HPL pÃ¥ grund av X.\"  # noqa: E501

        :return: The title of this TrafficSituationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TrafficSituationApiModel.

        Example data: \"Linje X, hÃ¥llplats HPL Ã¤r tillfÃ¤lligt indragen mot DEST/HPL pÃ¥ grund av X.\"  # noqa: E501

        :param title: The title of this TrafficSituationApiModel.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this TrafficSituationApiModel.  # noqa: E501

        Example data: \"NÃ¤rmaste hÃ¥llplats Ã¤r HPL och HPL. (Detta berÃ¤knas pÃ¥gÃ¥ frÃ¥n DATUM klockan HH:MM till DATUM klockan HH:MM.)\"  # noqa: E501

        :return: The description of this TrafficSituationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrafficSituationApiModel.

        Example data: \"NÃ¤rmaste hÃ¥llplats Ã¤r HPL och HPL. (Detta berÃ¤knas pÃ¥gÃ¥ frÃ¥n DATUM klockan HH:MM till DATUM klockan HH:MM.)\"  # noqa: E501

        :param description: The description of this TrafficSituationApiModel.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def affected_stop_points(self):
        """Gets the affected_stop_points of this TrafficSituationApiModel.  # noqa: E501


        :return: The affected_stop_points of this TrafficSituationApiModel.  # noqa: E501
        :rtype: list[StopPointApiModel]
        """
        return self._affected_stop_points

    @affected_stop_points.setter
    def affected_stop_points(self, affected_stop_points):
        """Sets the affected_stop_points of this TrafficSituationApiModel.


        :param affected_stop_points: The affected_stop_points of this TrafficSituationApiModel.  # noqa: E501
        :type affected_stop_points: list[StopPointApiModel]
        """
        if self.local_vars_configuration.client_side_validation and affected_stop_points is None:  # noqa: E501
            raise ValueError("Invalid value for `affected_stop_points`, must not be `None`")  # noqa: E501

        self._affected_stop_points = affected_stop_points

    @property
    def affected_lines(self):
        """Gets the affected_lines of this TrafficSituationApiModel.  # noqa: E501


        :return: The affected_lines of this TrafficSituationApiModel.  # noqa: E501
        :rtype: list[LineApiModel]
        """
        return self._affected_lines

    @affected_lines.setter
    def affected_lines(self, affected_lines):
        """Sets the affected_lines of this TrafficSituationApiModel.


        :param affected_lines: The affected_lines of this TrafficSituationApiModel.  # noqa: E501
        :type affected_lines: list[LineApiModel]
        """
        if self.local_vars_configuration.client_side_validation and affected_lines is None:  # noqa: E501
            raise ValueError("Invalid value for `affected_lines`, must not be `None`")  # noqa: E501

        self._affected_lines = affected_lines

    @property
    def affected_journeys(self):
        """Gets the affected_journeys of this TrafficSituationApiModel.  # noqa: E501


        :return: The affected_journeys of this TrafficSituationApiModel.  # noqa: E501
        :rtype: list[JourneyApiModel]
        """
        return self._affected_journeys

    @affected_journeys.setter
    def affected_journeys(self, affected_journeys):
        """Sets the affected_journeys of this TrafficSituationApiModel.


        :param affected_journeys: The affected_journeys of this TrafficSituationApiModel.  # noqa: E501
        :type affected_journeys: list[JourneyApiModel]
        """
        if self.local_vars_configuration.client_side_validation and affected_journeys is None:  # noqa: E501
            raise ValueError("Invalid value for `affected_journeys`, must not be `None`")  # noqa: E501

        self._affected_journeys = affected_journeys

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrafficSituationApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TrafficSituationApiModel):
            return True

        return self.to_dict() != other.to_dict()


class StopPointApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'gid': 'str',
        'name': 'str',
        'short_name': 'str',
        'stop_area_gid': 'str',
        'stop_area_name': 'str',
        'stop_area_short_name': 'str',
        'municipality_name': 'str',
        'municipality_number': 'int'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'short_name': 'shortName',
        'stop_area_gid': 'stopAreaGid',
        'stop_area_name': 'stopAreaName',
        'stop_area_short_name': 'stopAreaShortName',
        'municipality_name': 'municipalityName',
        'municipality_number': 'municipalityNumber'
    }

    def __init__(self, gid=None, name=None, short_name=None, stop_area_gid=None, stop_area_name=None,
                 stop_area_short_name=None, municipality_name=None, municipality_number=None,
                 local_vars_configuration=None):  # noqa: E501
        """StopPointApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._short_name = None
        self._stop_area_gid = None
        self._stop_area_name = None
        self._stop_area_short_name = None
        self._municipality_name = None
        self._municipality_number = None
        self.discriminator = None

        self.gid = gid
        if name is not None:
            self.name = name
        if short_name is not None:
            self.short_name = short_name
        if stop_area_gid is not None:
            self.stop_area_gid = stop_area_gid
        if stop_area_name is not None:
            self.stop_area_name = stop_area_name
        if stop_area_short_name is not None:
            self.stop_area_short_name = stop_area_short_name
        if municipality_name is not None:
            self.municipality_name = municipality_name
        if municipality_number is not None:
            self.municipality_number = municipality_number

    @property
    def gid(self):
        """Gets the gid of this StopPointApiModel.  # noqa: E501

        Example data: 9022014003310004  # noqa: E501

        :return: The gid of this StopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this StopPointApiModel.

        Example data: 9022014003310004  # noqa: E501

        :param gid: The gid of this StopPointApiModel.  # noqa: E501
        :type gid: str
        """
        if self.local_vars_configuration.client_side_validation and gid is None:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def name(self):
        """Gets the name of this StopPointApiModel.  # noqa: E501

        Full name of stop point.  Example data: \"Ã–xnered station (tÃ¥g)\"  # noqa: E501

        :return: The name of this StopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StopPointApiModel.

        Full name of stop point.  Example data: \"Ã–xnered station (tÃ¥g)\"  # noqa: E501

        :param name: The name of this StopPointApiModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def short_name(self):
        """Gets the short_name of this StopPointApiModel.  # noqa: E501

        Short name of stop point.  Example data: \"Ã–xnered stn\"  # noqa: E501

        :return: The short_name of this StopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this StopPointApiModel.

        Short name of stop point.  Example data: \"Ã–xnered stn\"  # noqa: E501

        :param short_name: The short_name of this StopPointApiModel.  # noqa: E501
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def stop_area_gid(self):
        """Gets the stop_area_gid of this StopPointApiModel.  # noqa: E501

        Example data: 9021014080800000  # noqa: E501

        :return: The stop_area_gid of this StopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._stop_area_gid

    @stop_area_gid.setter
    def stop_area_gid(self, stop_area_gid):
        """Sets the stop_area_gid of this StopPointApiModel.

        Example data: 9021014080800000  # noqa: E501

        :param stop_area_gid: The stop_area_gid of this StopPointApiModel.  # noqa: E501
        :type stop_area_gid: str
        """

        self._stop_area_gid = stop_area_gid

    @property
    def stop_area_name(self):
        """Gets the stop_area_name of this StopPointApiModel.  # noqa: E501

        Full name of stop area.  Example data: \"Ã–xnered station (tÃ¥g)\"  # noqa: E501

        :return: The stop_area_name of this StopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._stop_area_name

    @stop_area_name.setter
    def stop_area_name(self, stop_area_name):
        """Sets the stop_area_name of this StopPointApiModel.

        Full name of stop area.  Example data: \"Ã–xnered station (tÃ¥g)\"  # noqa: E501

        :param stop_area_name: The stop_area_name of this StopPointApiModel.  # noqa: E501
        :type stop_area_name: str
        """

        self._stop_area_name = stop_area_name

    @property
    def stop_area_short_name(self):
        """Gets the stop_area_short_name of this StopPointApiModel.  # noqa: E501

        Short name of stop point.  Example data: \"Ã–xnered stn\"  # noqa: E501

        :return: The stop_area_short_name of this StopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._stop_area_short_name

    @stop_area_short_name.setter
    def stop_area_short_name(self, stop_area_short_name):
        """Sets the stop_area_short_name of this StopPointApiModel.

        Short name of stop point.  Example data: \"Ã–xnered stn\"  # noqa: E501

        :param stop_area_short_name: The stop_area_short_name of this StopPointApiModel.  # noqa: E501
        :type stop_area_short_name: str
        """

        self._stop_area_short_name = stop_area_short_name

    @property
    def municipality_name(self):
        """Gets the municipality_name of this StopPointApiModel.  # noqa: E501

        Example data: \"Partille\"  # noqa: E501

        :return: The municipality_name of this StopPointApiModel.  # noqa: E501
        :rtype: str
        """
        return self._municipality_name

    @municipality_name.setter
    def municipality_name(self, municipality_name):
        """Sets the municipality_name of this StopPointApiModel.

        Example data: \"Partille\"  # noqa: E501

        :param municipality_name: The municipality_name of this StopPointApiModel.  # noqa: E501
        :type municipality_name: str
        """

        self._municipality_name = municipality_name

    @property
    def municipality_number(self):
        """Gets the municipality_number of this StopPointApiModel.  # noqa: E501

        Example data : 1402  # noqa: E501

        :return: The municipality_number of this StopPointApiModel.  # noqa: E501
        :rtype: int
        """
        return self._municipality_number

    @municipality_number.setter
    def municipality_number(self, municipality_number):
        """Sets the municipality_number of this StopPointApiModel.

        Example data : 1402  # noqa: E501

        :param municipality_number: The municipality_number of this StopPointApiModel.  # noqa: E501
        :type municipality_number: int
        """

        self._municipality_number = municipality_number

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StopPointApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StopPointApiModel):
            return True

        return self.to_dict() != other.to_dict()


class LineApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'gid': 'str',
        'name': 'str',
        'technical_number': 'int',
        'designation': 'str',
        'default_transport_mode_code': 'str',
        'transport_authority_code': 'str',
        'transport_authority_name': 'str',
        'text_color': 'str',
        'background_color': 'str',
        'directions': 'list[DirectionApiModel]',
        'municipalities': 'list[MunicipalityApiModel]',
        'affected_stop_point_gids': 'list[str]'
    }

    attribute_map = {
        'gid': 'gid',
        'name': 'name',
        'technical_number': 'technicalNumber',
        'designation': 'designation',
        'default_transport_mode_code': 'defaultTransportModeCode',
        'transport_authority_code': 'transportAuthorityCode',
        'transport_authority_name': 'transportAuthorityName',
        'text_color': 'textColor',
        'background_color': 'backgroundColor',
        'directions': 'directions',
        'municipalities': 'municipalities',
        'affected_stop_point_gids': 'affectedStopPointGids'
    }

    def __init__(self, gid=None, name=None, technical_number=None, designation=None, default_transport_mode_code=None,
                 transport_authority_code=None, transport_authority_name=None, text_color=None, background_color=None,
                 directions=None, municipalities=None, affected_stop_point_gids=None,
                 local_vars_configuration=None):  # noqa: E501
        """LineApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._name = None
        self._technical_number = None
        self._designation = None
        self._default_transport_mode_code = None
        self._transport_authority_code = None
        self._transport_authority_name = None
        self._text_color = None
        self._background_color = None
        self._directions = None
        self._municipalities = None
        self._affected_stop_point_gids = None
        self.discriminator = None

        self.gid = gid
        if name is not None:
            self.name = name
        if technical_number is not None:
            self.technical_number = technical_number
        if designation is not None:
            self.designation = designation
        if default_transport_mode_code is not None:
            self.default_transport_mode_code = default_transport_mode_code
        if transport_authority_code is not None:
            self.transport_authority_code = transport_authority_code
        if transport_authority_name is not None:
            self.transport_authority_name = transport_authority_name
        if text_color is not None:
            self.text_color = text_color
        if background_color is not None:
            self.background_color = background_color
        self.directions = directions
        self.municipalities = municipalities
        self.affected_stop_point_gids = affected_stop_point_gids

    @property
    def gid(self):
        """Gets the gid of this LineApiModel.  # noqa: E501

        Example data: 9011014620500000  # noqa: E501

        :return: The gid of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this LineApiModel.

        Example data: 9011014620500000  # noqa: E501

        :param gid: The gid of this LineApiModel.  # noqa: E501
        :type gid: str
        """
        if self.local_vars_configuration.client_side_validation and gid is None:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def name(self):
        """Gets the name of this LineApiModel.  # noqa: E501

        The name of the line.  Example data: \"GrÃ¶n express\", \"\"  # noqa: E501

        :return: The name of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LineApiModel.

        The name of the line.  Example data: \"GrÃ¶n express\", \"\"  # noqa: E501

        :param name: The name of this LineApiModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def technical_number(self):
        """Gets the technical_number of this LineApiModel.  # noqa: E501

        A technical number of the line - should normally not be used in public information. Can be of value for describing train lines.  Example data: 6205  # noqa: E501

        :return: The technical_number of this LineApiModel.  # noqa: E501
        :rtype: int
        """
        return self._technical_number

    @technical_number.setter
    def technical_number(self, technical_number):
        """Sets the technical_number of this LineApiModel.

        A technical number of the line - should normally not be used in public information. Can be of value for describing train lines.  Example data: 6205  # noqa: E501

        :param technical_number: The technical_number of this LineApiModel.  # noqa: E501
        :type technical_number: int
        """

        self._technical_number = technical_number

    @property
    def designation(self):
        """Gets the designation of this LineApiModel.  # noqa: E501

        Public identifier of line, i.e the public line \"number\", to be used in all presentation.  Example data: \"GRÃ–N\", \"4\"  # noqa: E501

        :return: The designation of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this LineApiModel.

        Public identifier of line, i.e the public line \"number\", to be used in all presentation.  Example data: \"GRÃ–N\", \"4\"  # noqa: E501

        :param designation: The designation of this LineApiModel.  # noqa: E501
        :type designation: str
        """

        self._designation = designation

    @property
    def default_transport_mode_code(self):
        """Gets the default_transport_mode_code of this LineApiModel.  # noqa: E501

        Code for the default transport mode of the line. Transport mode for individual journeys may differ from this value.  Valid codes are \"bus\", \"ferry\", \"metro\", \"ship\", \"taxi\", \"train\" and \"tram\".  Example data: \"bus\"  # noqa: E501

        :return: The default_transport_mode_code of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._default_transport_mode_code

    @default_transport_mode_code.setter
    def default_transport_mode_code(self, default_transport_mode_code):
        """Sets the default_transport_mode_code of this LineApiModel.

        Code for the default transport mode of the line. Transport mode for individual journeys may differ from this value.  Valid codes are \"bus\", \"ferry\", \"metro\", \"ship\", \"taxi\", \"train\" and \"tram\".  Example data: \"bus\"  # noqa: E501

        :param default_transport_mode_code: The default_transport_mode_code of this LineApiModel.  # noqa: E501
        :type default_transport_mode_code: str
        """

        self._default_transport_mode_code = default_transport_mode_code

    @property
    def transport_authority_code(self):
        """Gets the transport_authority_code of this LineApiModel.  # noqa: E501

        Code for transport authority.  Example data: \"vt\"  # noqa: E501

        :return: The transport_authority_code of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._transport_authority_code

    @transport_authority_code.setter
    def transport_authority_code(self, transport_authority_code):
        """Sets the transport_authority_code of this LineApiModel.

        Code for transport authority.  Example data: \"vt\"  # noqa: E501

        :param transport_authority_code: The transport_authority_code of this LineApiModel.  # noqa: E501
        :type transport_authority_code: str
        """

        self._transport_authority_code = transport_authority_code

    @property
    def transport_authority_name(self):
        """Gets the transport_authority_name of this LineApiModel.  # noqa: E501

        Full name of transport authority.  Example data: \"VÃ¤sttrafik\"  # noqa: E501

        :return: The transport_authority_name of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._transport_authority_name

    @transport_authority_name.setter
    def transport_authority_name(self, transport_authority_name):
        """Sets the transport_authority_name of this LineApiModel.

        Full name of transport authority.  Example data: \"VÃ¤sttrafik\"  # noqa: E501

        :param transport_authority_name: The transport_authority_name of this LineApiModel.  # noqa: E501
        :type transport_authority_name: str
        """

        self._transport_authority_name = transport_authority_name

    @property
    def text_color(self):
        """Gets the text_color of this LineApiModel.  # noqa: E501

        Color code for text for line.  Example data: \"FFFFFF\"  # noqa: E501

        :return: The text_color of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._text_color

    @text_color.setter
    def text_color(self, text_color):
        """Sets the text_color of this LineApiModel.

        Color code for text for line.  Example data: \"FFFFFF\"  # noqa: E501

        :param text_color: The text_color of this LineApiModel.  # noqa: E501
        :type text_color: str
        """

        self._text_color = text_color

    @property
    def background_color(self):
        """Gets the background_color of this LineApiModel.  # noqa: E501

        Color code for background for line.  Example data: \"F03A43\"  # noqa: E501

        :return: The background_color of this LineApiModel.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this LineApiModel.

        Color code for background for line.  Example data: \"F03A43\"  # noqa: E501

        :param background_color: The background_color of this LineApiModel.  # noqa: E501
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def directions(self):
        """Gets the directions of this LineApiModel.  # noqa: E501


        :return: The directions of this LineApiModel.  # noqa: E501
        :rtype: list[DirectionApiModel]
        """
        return self._directions

    @directions.setter
    def directions(self, directions):
        """Sets the directions of this LineApiModel.


        :param directions: The directions of this LineApiModel.  # noqa: E501
        :type directions: list[DirectionApiModel]
        """
        if self.local_vars_configuration.client_side_validation and directions is None:  # noqa: E501
            raise ValueError("Invalid value for `directions`, must not be `None`")  # noqa: E501

        self._directions = directions

    @property
    def municipalities(self):
        """Gets the municipalities of this LineApiModel.  # noqa: E501


        :return: The municipalities of this LineApiModel.  # noqa: E501
        :rtype: list[MunicipalityApiModel]
        """
        return self._municipalities

    @municipalities.setter
    def municipalities(self, municipalities):
        """Sets the municipalities of this LineApiModel.


        :param municipalities: The municipalities of this LineApiModel.  # noqa: E501
        :type municipalities: list[MunicipalityApiModel]
        """
        if self.local_vars_configuration.client_side_validation and municipalities is None:  # noqa: E501
            raise ValueError("Invalid value for `municipalities`, must not be `None`")  # noqa: E501

        self._municipalities = municipalities

    @property
    def affected_stop_point_gids(self):
        """Gets the affected_stop_point_gids of this LineApiModel.  # noqa: E501


        :return: The affected_stop_point_gids of this LineApiModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._affected_stop_point_gids

    @affected_stop_point_gids.setter
    def affected_stop_point_gids(self, affected_stop_point_gids):
        """Sets the affected_stop_point_gids of this LineApiModel.


        :param affected_stop_point_gids: The affected_stop_point_gids of this LineApiModel.  # noqa: E501
        :type affected_stop_point_gids: list[str]
        """
        if self.local_vars_configuration.client_side_validation and affected_stop_point_gids is None:  # noqa: E501
            raise ValueError("Invalid value for `affected_stop_point_gids`, must not be `None`")  # noqa: E501

        self._affected_stop_point_gids = affected_stop_point_gids

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LineApiModel):
            return True

        return self.to_dict() != other.to_dict()


class DirectionApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'gid': 'str',
        'direction_code': 'int',
        'name': 'str'
    }

    attribute_map = {
        'gid': 'gid',
        'direction_code': 'directionCode',
        'name': 'name'
    }

    def __init__(self, gid=None, direction_code=None, name=None, local_vars_configuration=None):  # noqa: E501
        """DirectionApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._direction_code = None
        self._name = None
        self.discriminator = None

        self.gid = gid
        if direction_code is not None:
            self.direction_code = direction_code
        if name is not None:
            self.name = name

    @property
    def gid(self):
        """Gets the gid of this DirectionApiModel.  # noqa: E501

        Example data: 9014014620510000  # noqa: E501

        :return: The gid of this DirectionApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this DirectionApiModel.

        Example data: 9014014620510000  # noqa: E501

        :param gid: The gid of this DirectionApiModel.  # noqa: E501
        :type gid: str
        """
        if self.local_vars_configuration.client_side_validation and gid is None:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def direction_code(self):
        """Gets the direction_code of this DirectionApiModel.  # noqa: E501

        Example data: 1, 2  # noqa: E501

        :return: The direction_code of this DirectionApiModel.  # noqa: E501
        :rtype: int
        """
        return self._direction_code

    @direction_code.setter
    def direction_code(self, direction_code):
        """Sets the direction_code of this DirectionApiModel.

        Example data: 1, 2  # noqa: E501

        :param direction_code: The direction_code of this DirectionApiModel.  # noqa: E501
        :type direction_code: int
        """

        self._direction_code = direction_code

    @property
    def name(self):
        """Gets the name of this DirectionApiModel.  # noqa: E501

        Example data: \"KungÃ¤lv - GÃ¶teborg - MÃ¶lnlycke\"  # noqa: E501

        :return: The name of this DirectionApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DirectionApiModel.

        Example data: \"KungÃ¤lv - GÃ¶teborg - MÃ¶lnlycke\"  # noqa: E501

        :param name: The name of this DirectionApiModel.  # noqa: E501
        :type name: str
        """

        self._name = name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectionApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DirectionApiModel):
            return True

        return self.to_dict() != other.to_dict()


class MunicipalityApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'municipality_number': 'int',
        'municipality_name': 'str'
    }

    attribute_map = {
        'municipality_number': 'municipalityNumber',
        'municipality_name': 'municipalityName'
    }

    def __init__(self, municipality_number=None, municipality_name=None, local_vars_configuration=None):  # noqa: E501
        """MunicipalityApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._municipality_number = None
        self._municipality_name = None
        self.discriminator = None

        if municipality_number is not None:
            self.municipality_number = municipality_number
        if municipality_name is not None:
            self.municipality_name = municipality_name

    @property
    def municipality_number(self):
        """Gets the municipality_number of this MunicipalityApiModel.  # noqa: E501

        Example data: 1480  # noqa: E501

        :return: The municipality_number of this MunicipalityApiModel.  # noqa: E501
        :rtype: int
        """
        return self._municipality_number

    @municipality_number.setter
    def municipality_number(self, municipality_number):
        """Sets the municipality_number of this MunicipalityApiModel.

        Example data: 1480  # noqa: E501

        :param municipality_number: The municipality_number of this MunicipalityApiModel.  # noqa: E501
        :type municipality_number: int
        """

        self._municipality_number = municipality_number

    @property
    def municipality_name(self):
        """Gets the municipality_name of this MunicipalityApiModel.  # noqa: E501

        Example data: \"GÃ¶teborg\"  # noqa: E501

        :return: The municipality_name of this MunicipalityApiModel.  # noqa: E501
        :rtype: str
        """
        return self._municipality_name

    @municipality_name.setter
    def municipality_name(self, municipality_name):
        """Sets the municipality_name of this MunicipalityApiModel.

        Example data: \"GÃ¶teborg\"  # noqa: E501

        :param municipality_name: The municipality_name of this MunicipalityApiModel.  # noqa: E501
        :type municipality_name: str
        """

        self._municipality_name = municipality_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MunicipalityApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MunicipalityApiModel):
            return True

        return self.to_dict() != other.to_dict()


class JourneyApiModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    api_types = {
        'gid': 'str',
        'departure_date_time': 'datetime',
        'line': 'LineApiModel'
    }

    attribute_map = {
        'gid': 'gid',
        'departure_date_time': 'departureDateTime',
        'line': 'line'
    }

    def __init__(self, gid=None, departure_date_time=None, line=None, local_vars_configuration=None):  # noqa: E501
        """JourneyApiModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._gid = None
        self._departure_date_time = None
        self._line = None
        self.discriminator = None

        self.gid = gid
        if departure_date_time is not None:
            self.departure_date_time = departure_date_time
        self.line = line

    @property
    def gid(self):
        """Gets the gid of this JourneyApiModel.  # noqa: E501

        Example data: 9015014620500001  # noqa: E501

        :return: The gid of this JourneyApiModel.  # noqa: E501
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this JourneyApiModel.

        Example data: 9015014620500001  # noqa: E501

        :param gid: The gid of this JourneyApiModel.  # noqa: E501
        :type gid: str
        """
        if self.local_vars_configuration.client_side_validation and gid is None:  # noqa: E501
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def departure_date_time(self):
        """Gets the departure_date_time of this JourneyApiModel.  # noqa: E501

        Example data: \"2018-01-03T10:31:00.000+01:00\"  # noqa: E501

        :return: The departure_date_time of this JourneyApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._departure_date_time

    @departure_date_time.setter
    def departure_date_time(self, departure_date_time):
        """Sets the departure_date_time of this JourneyApiModel.

        Example data: \"2018-01-03T10:31:00.000+01:00\"  # noqa: E501

        :param departure_date_time: The departure_date_time of this JourneyApiModel.  # noqa: E501
        :type departure_date_time: datetime
        """

        self._departure_date_time = departure_date_time

    @property
    def line(self):
        """Gets the line of this JourneyApiModel.  # noqa: E501


        :return: The line of this JourneyApiModel.  # noqa: E501
        :rtype: LineApiModel
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this JourneyApiModel.


        :param line: The line of this JourneyApiModel.  # noqa: E501
        :type line: LineApiModel
        """
        if self.local_vars_configuration.client_side_validation and line is None:  # noqa: E501
            raise ValueError("Invalid value for `line`, must not be `None`")  # noqa: E501

        self._line = line

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.api_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JourneyApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JourneyApiModel):
            return True

        return self.to_dict() != other.to_dict()
